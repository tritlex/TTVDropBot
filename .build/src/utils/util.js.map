{
  "version": 3,
  "sources": ["../../../src/utils/util.ts"],
  "sourcesContent": ["import * as rax from \"retry-axios\";\nimport winston from \"winston\";\nimport {userdata} from \"../index\";\n\nconst chalk = require(\"chalk\");\nconst fs = require(\"fs\");\n\nexport function validPath(str: string) {\n    if (fs.existsSync(str) && str.endsWith('.exe')) {\n        return true\n    } else {\n        return \"Please provide a Valid Path...\"\n    }\n}\n\nexport function validURL(str: string) {\n    if (str.startsWith(\"https://www.twitch.tv/\")) {\n        return true\n    } else {\n        return \"Please provide a Valid URL...\"\n    }\n}\n\nexport function getRandomInt(max: number) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function statustoString(status: boolean) {\n    if(!status) {\n        return chalk.red(\"Offline\")\n    } else {\n        return chalk.greenBright(\"Live\")\n    }\n}\n\nexport function claimedstatustoString (streamer: boolean) {\n    return (streamer) ? chalk.greenBright.italic('Claimed') : chalk.red.italic(\"Unclaimed\")\n}\n\nexport function livechresponse (foundlivechs: Array<string>) {\n    if (foundlivechs.length >= 1) {\n        return chalk.cyanBright(foundlivechs[0])\n    } else if (foundlivechs.length === 0) {\n        return chalk.cyan('No Channel Live')\n    }\n}\n\nexport function minutestoPercent(timewatched: number, maxtime: number) {\n    let result = (100/maxtime)*timewatched\n    let resultr = Math.round((result + Number.EPSILON) * 100) / 100;\n    return resultr\n}\n\nexport async function delay(ms: number) {\n    return await new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport let retryConfig = {\n    retry: 3,\n    noResponseRetries: 3,\n    retryDelay: userdata.settings.RetryDelay,\n    statusCodesToRetry: [[100, 199], [429, 429, 400], [500, 599]],\n    httpMethodsToRetry: ['GET', 'HEAD', 'OPTIONS', 'DELETE', 'PUT', 'POST'],\n    onRetryAttempt: (err:any) => {\n        const cfg = rax.getConfig(err);\n        winston.info(chalk.yellow('Failed axios Request... Retrying in '+ Math.round(((cfg?.retryDelay)!/1000) * 100)/100 + ' seconds... Try: ' + cfg?.currentRetryAttempt + \"/3 \" + err), {event: \"requestRetry\"});\n    },\n    backoffType: 'static' as const\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAqB;AACrB,qBAAoB;AACpB,eAAuB;AAEvB,MAAM,QAAQ,QAAQ;AACtB,MAAM,KAAK,QAAQ;AAEZ,mBAAmB,KAAa;AACnC,MAAI,GAAG,WAAW,QAAQ,IAAI,SAAS,SAAS;AAC5C,WAAO;AAAA,SACJ;AACH,WAAO;AAAA;AAAA;AAIR,kBAAkB,KAAa;AAClC,MAAI,IAAI,WAAW,2BAA2B;AAC1C,WAAO;AAAA,SACJ;AACH,WAAO;AAAA;AAAA;AAIR,sBAAsB,KAAa;AACtC,SAAO,KAAK,MAAM,KAAK,WAAW,KAAK,MAAM;AAAA;AAG1C,wBAAwB,QAAiB;AAC5C,MAAG,CAAC,QAAQ;AACR,WAAO,MAAM,IAAI;AAAA,SACd;AACH,WAAO,MAAM,YAAY;AAAA;AAAA;AAI1B,+BAAgC,UAAmB;AACtD,SAAQ,WAAY,MAAM,YAAY,OAAO,aAAa,MAAM,IAAI,OAAO;AAAA;AAGxE,wBAAyB,cAA6B;AACzD,MAAI,aAAa,UAAU,GAAG;AAC1B,WAAO,MAAM,WAAW,aAAa;AAAA,aAC9B,aAAa,WAAW,GAAG;AAClC,WAAO,MAAM,KAAK;AAAA;AAAA;AAInB,0BAA0B,aAAqB,SAAiB;AACnE,MAAI,SAAU,MAAI,UAAS;AAC3B,MAAI,UAAU,KAAK,MAAO,UAAS,OAAO,WAAW,OAAO;AAC5D,SAAO;AAAA;AAGX,qBAA4B,IAAY;AACpC,SAAO,MAAM,IAAI,QAAQ,aAAW,WAAW,SAAS;AAAA;AAGrD,IAAI,cAAc;AAAA,EACrB,OAAO;AAAA,EACP,mBAAmB;AAAA,EACnB,YAAY,kBAAS,SAAS;AAAA,EAC9B,oBAAoB,CAAC,CAAC,KAAK,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK;AAAA,EACxD,oBAAoB,CAAC,OAAO,QAAQ,WAAW,UAAU,OAAO;AAAA,EAChE,gBAAgB,CAAC,QAAY;AACzB,UAAM,MAAM,IAAI,UAAU;AAC1B,2BAAQ,KAAK,MAAM,OAAO,yCAAwC,KAAK,MAAQ,KAAK,aAAa,MAAQ,OAAK,MAAM,sBAAsB,KAAK,sBAAsB,QAAQ,MAAM,EAAC,OAAO;AAAA;AAAA,EAE/L,aAAa;AAAA;",
  "names": []
}

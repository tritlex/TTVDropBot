{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["export const version = \"2.0.0.4\";\nimport {userdataclass} from \"./Data/userdata\";\nexport let userdata = new userdataclass();\nimport chalk from \"chalk\";\nimport CheckVersion from \"./Checks/versionCheck\"\nimport GetSettings, {logimportantvalues} from \"./functions/get/getSettings\"\nimport GetWatchOption from \"./functions/get/getWatchOption\"\nimport {askWhatDropToStart, askWhatGameToWatch, getTwitchDrops} from \"./functions/get/getTwitchDrops\"\nimport {startWatching} from \"./functions/startWatching\";\nimport {login} from \"./functions/login/defaultlogin\";\nimport fs from \"fs\";\nimport {getCustomChannel} from \"./functions/get/getCustomChannel\";\nimport {CustomEventHandlerStart} from \"./functions/handler/custompageHandler\";\nimport {validateAuthToken} from \"./Checks/validateAuthToken\";\nimport {matchArgs, setArgs} from \"./functions/get/getArgs\";\nimport * as rax from 'retry-axios';\nimport {retryConfig} from \"./utils/util\";\nconst winston = require('winston');\nconst TwitchGQL = require(\"@zaarrg/twitch-gql-ttvdropbot\").Init();\n\n(async () => {\n    //Get Settings\n    await setArgs();\n    await GetSettings();\n    await matchArgs();\n    await setRetries();\n    await logimportantvalues()\n    await CheckVersion(version)\n    //Http Keep Alive\n    if (userdata.settings.UseKeepAlive) keepAlive();\n    //Login\n    await login()\n    //Validate\n    await validateAuthToken()\n    //Get Watch Option\n    if (!userdata.settings.displayless) {\n        await GetWatchOption()\n        await watchoptionSwitch()\n    } else {\n        if (userdata.settings.ForceCustomChannel) {\n            if (fs.existsSync('./CustomChannels.json')) {\n                userdata.watch_option = 'Custom Channels'\n            } else {\n                winston.warn(chalk.yellow('Cant force custom channels without a CustomChannels.json'))\n                userdata.watch_option = 'Twitch Drops'\n            }\n        } else {\n            userdata.watch_option = 'Twitch Drops'\n        }\n        await watchoptionSwitch()\n    }\n    winston.info(chalk.gray('Idle!'))\n})();\n\n\nasync function watchoptionSwitch() {\n    switch (userdata.watch_option) {\n        case \"Twitch Drops\":\n            //What Twitch Drops\n            await askWhatGameToWatch(false)\n            //Get The Drops of the Game\n            await getTwitchDrops(userdata.game, true)\n            if (userdata.settings.displayless) {\n                await askWhatDropToStart(true, true, true, false)\n            } else {\n                await askWhatDropToStart(false, true, true, false)}\n            await startWatching()\n            break;\n        case \"Custom Channels\":\n            await getCustomChannel()\n            await CustomEventHandlerStart(userdata.startDrop)\n            break;\n    }\n}\n\nasync function setRetries() {\n    await TwitchGQL.SetRetryTimeout(userdata.settings.RetryDelay).then(() => {\n        retryConfig.retryDelay = userdata.settings.RetryDelay;\n        rax.attach();\n    })\n}\n\nfunction keepAlive(port = process.env.PORT) {\n    const express = require('express');\n    const app = express()\n    app.get(\"/\", (req: any, res: any) => res.send(\"TwitchDropBot is alive\"))\n    app.listen(port, () => winston.info(`App listening on port ${port || 0}`))\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA,sBAA4B;AAE5B,mBAAkB;AAClB,0BAAyB;AACzB,yBAA8C;AAC9C,4BAA2B;AAC3B,4BAAqE;AACrE,2BAA4B;AAC5B,0BAAoB;AACpB,gBAAe;AACf,8BAA+B;AAC/B,+BAAsC;AACtC,+BAAgC;AAChC,qBAAiC;AACjC,UAAqB;AACrB,kBAA0B;AAhBnB,MAAM,UAAU;AAEhB,IAAI,WAAW,IAAI;AAe1B,MAAM,UAAU,QAAQ;AACxB,MAAM,YAAY,QAAQ,iCAAiC;AAE3D,AAAC,aAAY;AAET,QAAM;AACN,QAAM;AACN,QAAM;AACN,QAAM;AACN,QAAM;AACN,QAAM,iCAAa;AAEnB,MAAI,SAAS,SAAS;AAAc;AAEpC,QAAM;AAEN,QAAM;AAEN,MAAI,CAAC,SAAS,SAAS,aAAa;AAChC,UAAM;AACN,UAAM;AAAA,SACH;AACH,QAAI,SAAS,SAAS,oBAAoB;AACtC,UAAI,kBAAG,WAAW,0BAA0B;AACxC,iBAAS,eAAe;AAAA,aACrB;AACH,gBAAQ,KAAK,qBAAM,OAAO;AAC1B,iBAAS,eAAe;AAAA;AAAA,WAEzB;AACH,eAAS,eAAe;AAAA;AAE5B,UAAM;AAAA;AAEV,UAAQ,KAAK,qBAAM,KAAK;AAAA;AAI5B,mCAAmC;AAC/B,UAAQ,SAAS;AAAA,SACR;AAED,YAAM,8CAAmB;AAEzB,YAAM,0CAAe,SAAS,MAAM;AACpC,UAAI,SAAS,SAAS,aAAa;AAC/B,cAAM,8CAAmB,MAAM,MAAM,MAAM;AAAA,aACxC;AACH,cAAM,8CAAmB,OAAO,MAAM,MAAM;AAAA;AAChD,YAAM;AACN;AAAA,SACC;AACD,YAAM;AACN,YAAM,sDAAwB,SAAS;AACvC;AAAA;AAAA;AAIZ,4BAA4B;AACxB,QAAM,UAAU,gBAAgB,SAAS,SAAS,YAAY,KAAK,MAAM;AACrE,4BAAY,aAAa,SAAS,SAAS;AAC3C,QAAI;AAAA;AAAA;AAIZ,mBAAmB,OAAO,QAAQ,IAAI,MAAM;AACxC,QAAM,UAAU,QAAQ;AACxB,QAAM,MAAM;AACZ,MAAI,IAAI,KAAK,CAAC,KAAU,QAAa,IAAI,KAAK;AAC9C,MAAI,OAAO,MAAM,MAAM,QAAQ,KAAK,yBAAyB,QAAQ;AAAA;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../../src/functions/get/getCustomChannel.ts"],
  "sourcesContent": ["import fs from \"fs\";\nimport {userdata} from \"../../index\" ;\nimport winston from \"winston\";\nimport chalk from \"chalk\";\nimport {getRandomInt, statustoString, validURL} from \"../../utils/util\";\nconst inputReader = require(\"wait-console-input\");\nconst inquirer = require(\"inquirer\");\nconst TwitchGQL = require(\"@zaarrg/twitch-gql-ttvdropbot\").Init();\n\nexport async function getCustomChannel() {\n    const path = './CustomChannels.json'\n\n    if (!userdata.settings.displayless) {\n\n        if(fs.existsSync(path)) {\n            let customch = fs.readFileSync('./CustomChannels.json', 'utf8');\n            userdata.customchannel = JSON.parse(customch);\n\n            //Check Drops Amount...\n            if (userdata.customchannel.length === 0) {\n                winston.silly(\" \");\n                winston.info(chalk.gray(\"No Custom Channels Found...\"))\n                await createCustomChannel(true)\n            }\n            winston.silly(\" \");\n            winston.info(chalk.gray(\"Found \" + userdata.customchannel.length + \" Custom Channels...\"))\n            winston.silly(\" \");\n            //Ask if user wanna add another ch\n            await addanotherone()\n            await customCheckLive(true);\n            await askCustomChannelStart(false, true)\n\n\n        } else {\n            winston.silly(\" \");\n            winston.info(chalk.gray(\"No Custom Channels Found...\"))\n            await createCustomChannel(false);\n\n            if (userdata.customchannel.length === 0) {\n                winston.silly(\" \");\n                winston.info(chalk.gray(\"No Custom Channels Created...\"))\n                winston.silly(\" \");\n                winston.info(chalk.gray(\"Closing Bot, No Custom Channels Added!\"))\n                if (!userdata.settings.displayless) inputReader.wait(chalk.gray(\"Press any Key to continue...\"))\n                process.exit(21);\n            }\n            winston.silly(\" \");\n            winston.info(chalk.gray(\"Found \" + userdata.customchannel.length + \" Custom Channels...\"))\n            winston.silly(\" \");\n            //Ask if user wanna add another ch\n            await addanotherone()\n            await customCheckLive(true);\n            await askCustomChannelStart(false, true)\n        }\n\n    } else {\n        const path = './CustomChannels.json'\n        if (fs.existsSync(path)) {\n            let customch = fs.readFileSync('./CustomChannels.json', 'utf8');\n            userdata.customchannel = JSON.parse(customch);\n            //Check Drops Amount...\n            if (userdata.customchannel.length === 0) {\n                winston.silly(\" \");\n                winston.info(chalk.gray(\"No Custom Channels Found...\"))\n                process.exit(1)\n            }\n            winston.silly(\" \");\n            winston.info(chalk.gray(\"Found \" + userdata.customchannel.length + \" Custom Channels...\"))\n            winston.silly(\" \");\n            //Let the User Select a Starting Ch\n            await customCheckLive(true);\n            await askCustomChannelStart(true, true)\n        } else {\n            winston.silly(\" \");\n            winston.info(chalk.gray(\"Closing Bot, somehow there is no Customchannels file anymore...!\"))\n            if (!userdata.settings.displayless) inputReader.wait(chalk.gray(\"Press any Key to continue...\"))\n            process.exit(21);\n        }\n    }\n\n}\n\nasync function addanotherone() {\n    //Ask if user wanna add another ch\n    await inquirer\n        .prompt([\n            {\n                type: 'confirm',\n                name: 'confirmed',\n                message: 'Do you wanna add a new Custom Channel?',\n            },\n        ])\n        .then(async (answers: {confirmed: boolean}) => {\n            if (answers.confirmed) {\n                await createCustomChannel(false);\n                winston.silly(\" \");\n                winston.info(chalk.gray(\"Found \" + userdata.customchannel.length + \" Custom Channels...\"))\n                winston.silly(\" \");\n            }\n        })\n}\n\nexport async function askCustomChannelStart(random: boolean, filterlive: boolean) {\n    userdata.availableDropNameChoices = [];\n    userdata.customchannel.forEach(channel => {\n        if (filterlive) {\n            if (channel.live) {\n                userdata.availableDropNameChoices.push(channel.Name)\n            }\n        } else {\n            userdata.availableDropNameChoices.push(channel.Name)\n        }\n    })\n    if (userdata.availableDropNameChoices.length === 0) {\n        winston.info(chalk.yellow('No Channels life select any to start...'))\n        userdata.customchannel.forEach(channel => {userdata.availableDropNameChoices.push(channel.Name)})\n    }\n\n    winston.silly(\" \")\n    if (!random) {\n        await inquirer\n            .prompt([\n                {\n                    type: 'list',\n                    name: 'namelist',\n                    message: 'What Drop do you wanna start Watching?',\n                    choices: userdata.availableDropNameChoices,\n                },\n            ])\n            .then(async (answer: {namelist: string}) => {\n                userdata.customchannel.forEach(drop => {\n                    if (drop.Name === answer.namelist) {\n                        userdata.startDrop = drop.TTVLink.split('https://www.twitch.tv/')[1]\n                    }\n                })\n            });\n    } else {\n        let randomname = userdata.availableDropNameChoices[getRandomInt(userdata.availableDropNameChoices.length)]\n        userdata.customchannel.forEach(drop => {\n            if (drop.Name === randomname) {\n                userdata.startDrop = drop.TTVLink.split('https://www.twitch.tv/')[1]\n            }\n        })\n        winston.info(chalk.gray('Selected a random drop to watch: ' + chalk.white(userdata.startDrop)))\n    }\n}\n\nasync function createCustomChannel(ask: boolean) {\n    if (ask) {\n        await inquirer\n            .prompt([\n                {\n                    type: 'confirm',\n                    name: 'confirmed',\n                    message: 'Do you wanna add a Custom Channel?',\n                },\n            ])\n            .then(async (answers: {confirmed: boolean}) => {\n                if (!answers.confirmed) {\n                    winston.silly(\" \");\n                    winston.info(chalk.gray(\"Closing Bot, No Custom Channels Added!\"))\n                    if (!userdata.settings.displayless) inputReader.wait(chalk.gray(\"Press any Key to continue...\"))\n                    process.exit(21);\n                } else {\n                    await getCustomDetails()\n                }});\n    } else {\n        await getCustomDetails()\n    }\n}\n\nasync function getCustomDetails() {\n    let CustomChannel = {\n        Name: '',\n        TTVLink: '',\n        WatchType: '',\n        Time: 0,\n        Points: false\n    }\n    const watch = [\"Watch indefinitely\", \"Watch until time runs out\"]\n    await inquirer\n        .prompt([\n            {\n                type: 'input',\n                name: 'name',\n                message: 'Please provide a Name for this Custom Channel:',\n            },\n            {\n                type: 'input',\n                name: 'ttvlink',\n                message: 'Please provide the Twitch Url:',\n                validate: (value: string) => validURL(value),\n            },\n            {\n                type: 'list',\n                name: 'watchoption',\n                message: 'How should the channel be watched?',\n                choices: watch,\n            },\n            {\n                type: 'confirm',\n                name: 'points',\n                message: 'Should the Bot also Farm Points?',\n            },\n        ])\n        .then(async (answers: {name: string, ttvlink: string, watchoption: string, points: boolean}) => {\n            winston.info(chalk.gray(\"Setting Name, link and the watch type...\"))\n            //Set\n            CustomChannel.Name = answers.name\n            CustomChannel.TTVLink = answers.ttvlink\n            CustomChannel.WatchType = answers.watchoption\n            CustomChannel.Points = answers.points\n\n            if (answers.watchoption === 'Watch until time runs out') {\n                await inquirer.prompt([\n                    {\n                        type: 'input',\n                        name: 'time',\n                        message: 'How many minutes should the channel be watched:',\n                    },\n                ]).then(async (answers: {time: number}) => {\n                    winston.info(chalk.gray(\"Setting Time...\"))\n                    CustomChannel.Time = answers.time;\n                })\n            }\n            userdata.customchannel.push(CustomChannel)\n            //Save Created CH\n            await fs.promises.writeFile('./CustomChannels.json', JSON.stringify(userdata.customchannel, null, 2)).then(function () {\n                winston.silly(\" \");\n                winston.info(chalk.green(\"Successfully Saved Custom Channels...\"))\n                winston.silly(\" \");\n            }).catch(err => {throw err})\n        });\n}\n\nexport async function customCheckLive(feedback: boolean) {\n    for (const customchannel of userdata.customchannel) {\n        let channelLogin = customchannel.TTVLink.split('https://www.twitch.tv/')[1]\n        let status = await TwitchGQL.GetLiveStatus(channelLogin)\n        customchannel[\"live\"] = !!status;\n        if (feedback) {\n            winston.silly(\" \")\n            winston.info(chalk.cyan(customchannel.TTVLink) + \" | \" + chalk.magenta(customchannel.Name)+ \" | \" + statustoString(customchannel.live), {event: \"getResult\"});\n        }\n    }\n    if (feedback) winston.silly(\" \")\n}"],
  "mappings": "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",
  "names": []
}

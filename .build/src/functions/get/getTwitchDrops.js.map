{
  "version": 3,
  "sources": ["../../../../src/functions/get/getTwitchDrops.ts"],
  "sourcesContent": ["import {timebased} from \"../../Data/userdata\";\nimport {userdata} from \"../../index\";\nimport winston from \"winston\";\nimport chalk from \"chalk\";\nimport {claimedstatustoString, getRandomInt, livechresponse, statustoString} from \"../../utils/util\";\nimport {findLiveChannel} from \"../findLiveChannel\";\nimport {claimableCheck, matchClaimedDrops} from \"../../Checks/claimCheck\";\nimport {dateCheck} from \"../../Checks/dateCheck\";\n\nconst TwitchGQL = require(\"@zaarrg/twitch-gql-ttvdropbot\").Init();\nconst inquirer = require(\"inquirer\");\n\nexport async function getTwitchDrops(game: string, feedback: boolean) {\n    userdata.drops = []\n\n    let dropidstoget:Array<string> = [];\n\n    const DropCampaignDetails = await TwitchGQL._SendQuery(\"ViewerDropsDashboard\", {}, '', 'OAuth ' + userdata.auth_token, true, {}, true)\n    userdata.userid = DropCampaignDetails[0].data.currentUser.id\n    let allDropCampaings = DropCampaignDetails[0].data.currentUser.dropCampaigns\n    if (userdata.settings.debug) winston.info('DropCampain %o', JSON.stringify(DropCampaignDetails,null, 2))\n\n    await allDropCampaings.forEach((campaign: Campaign) => {\n        if (campaign.status === 'ACTIVE') {\n            if (campaign.game.displayName === game) {\n                dropidstoget.push(campaign.id)\n            }\n        }\n    })\n    if (feedback) {\n        winston.silly(\" \")\n        winston.info(chalk.gray('Getting all available Drops...'), {event: \"get\"})\n    }\n    for (const e of dropidstoget) {\n        let opts = {\n            channelLogin: userdata.userid,\n            dropID: e\n        }\n        const DropDetails = await TwitchGQL._SendQuery(\"DropCampaignDetails\", opts, 'f6396f5ffdde867a8f6f6da18286e4baf02e5b98d14689a69b5af320a4c7b7b8', 'OAuth ' + userdata.auth_token, true, {}, true)\n        let CampaignDetails = DropDetails[0].data.user.dropCampaign\n\n        userdata.drops.push({\n            dropid: CampaignDetails.id,\n            dropname: CampaignDetails.name,\n            Connected: CampaignDetails.self.isAccountConnected,\n            allowedchannels: CampaignDetails.allow.channels,\n            timebasedrop: CampaignDetails.timeBasedDrops,\n            live: false,\n            foundlivech: [],\n            isClaimed: false\n        })\n    }\n    if (feedback) {\n        winston.silly(\" \")\n        winston.info(chalk.gray('Looking for a Live Channel...'), {event: \"get\"})\n    }\n    //Check if drop has a Live channel\n    for (const e of userdata.drops) {\n        let livechs = await findLiveChannel(e.allowedchannels)\n        if (livechs.length !== 0) {\n            e.live = true;\n            e.foundlivech.push(livechs[0])\n        } else {\n            e.live = false;\n        }\n    }\n\n    if (feedback) {\n        winston.silly(\" \")\n        winston.info(chalk.gray('Checking your Inventory for started Drops...'), {event: \"get\"})\n    }\n    //Check if drop is started if so get data and set it\n    const rawInventory = await TwitchGQL._SendQuery(\"Inventory\", {}, '27f074f54ff74e0b05c8244ef2667180c2f911255e589ccd693a1a52ccca7367', 'OAuth ' + userdata.auth_token, true, {}, true)\n    let Inventory = rawInventory[0].data.currentUser.inventory\n    if (userdata.settings.debug) winston.info('rawinventory %o', JSON.stringify(rawInventory,null, 2))\n    Inventory.gameEventDrops.forEach((claimeddrop: GameEventDrops) => {\n        userdata.claimedDrops.push({\n            id: claimeddrop.id,\n            imageurl: claimeddrop.imageURL,\n            name: claimeddrop.name,\n            game: claimeddrop.game\n        })\n    })\n\n\n    //Match inventory drops in progress to the right Drops\n    userdata.drops.forEach(DropElement => {\n        if (Inventory.dropCampaignsInProgress !== null) {\n            Inventory.dropCampaignsInProgress.forEach((e: DropCampaignsInProgress) => {\n                if (DropElement.dropid === e.id) {\n                    DropElement.timebasedrop = e.timeBasedDrops;\n                }\n            })\n        } else {\n            if (userdata.settings.debug) winston.info('No Drops in Progress...')\n        }\n    })\n\n    //Make sure self object exits\n    userdata.drops.forEach(drop => {\n        drop.timebasedrop.forEach(time => {\n            if (!(\"self\" in time)) {\n                time['self'] = {\n                    __typename: \"TimeBasedDropSelfEdge\",\n                    currentMinutesWatched: 0,\n                    dropInstanceID: null,\n                    isClaimed: null\n                }\n            }\n        })\n    })\n\n\n    if (feedback) {\n        winston.silly(\" \")\n        winston.info(chalk.gray('Checking your Inventory for claimed Drops...'), {event: \"get\"})\n    }\n    await matchClaimedDrops()\n    //Update Date Status\n    for (const drop of userdata.drops) {\n        await dateCheck(drop, true)\n        await claimableCheck(drop, userdata.settings.AutoClaim, true)\n    }\n\n    //Log Result\n    if (feedback) {\n        userdata.drops.forEach(drop => {\n            winston.silly(\" \")\n            winston.info(livechresponse(drop.foundlivech) + \" | \" + chalk.magenta(drop.dropname)  + \" | \" + statustoString(drop.live) + ' | ' + claimedstatustoString(drop.isClaimed),  {event: \"getResult\"})\n        })\n    }\n\n}\n\nexport async function askWhatDropToStart(random: boolean, filterlive: boolean, filterNonActive: boolean, filterlast: boolean) {\n    userdata.availableDropNameChoices = []\n    userdata.drops.forEach(drop => {\n        if (filterlive) {\n            if (drop.live) {\n                userdata.availableDropNameChoices.push(drop.dropname)\n            }\n        } else {\n            userdata.availableDropNameChoices.push(drop.dropname)\n        }\n    })\n\n    if (filterNonActive) {\n        for (const [i, DropName] of userdata.availableDropNameChoices.entries()) {\n            if (userdata.nonActiveDrops.includes(DropName)){\n                userdata.availableDropNameChoices.splice(i, 1)\n                winston.silly(\" \")\n                winston.info(chalk.yellow(DropName + ' | ' + 'was removed because the drop ended or not started yet...'))\n            }\n        }\n    }\n\n    if (filterlast) {\n        for (const [i, choice] of userdata.availableDropNameChoices.entries()) {\n            if (choice === userdata.startDrop) {\n                userdata.availableDropNameChoices.splice(i, 1)\n            }\n        }\n    }\n\n    if (userdata.availableDropNameChoices.length === 0) {\n        winston.silly(\" \")\n        winston.info(chalk.gray('All available Channels Offline... Select any Drop to start watching...'))\n        userdata.drops.forEach(drop => {\n            userdata.availableDropNameChoices.push(drop.dropname)\n        })\n    }\n\n    winston.silly(\" \")\n    if (!random) {\n        await inquirer\n            .prompt([\n                {\n                    type: 'list',\n                    name: 'namelist',\n                    message: 'What Drop do you wanna start Watching?',\n                    choices: userdata.availableDropNameChoices,\n                },\n            ])\n            .then(async (answer: {namelist: string}) => {\n                userdata.startDrop = answer.namelist\n            });\n    } else {\n        userdata.startDrop = userdata.availableDropNameChoices[getRandomInt(userdata.availableDropNameChoices.length)]\n        winston.info(chalk.gray('Selected a random drop to watch: ' + chalk.white(userdata.startDrop)))\n    }\n\n}\n\n\nexport async function askWhatGameToWatch(random: boolean) {\n    let activecampainnames = await getActiveCampaigns();\n\n    winston.silly(\" \")\n    if (!userdata.settings.displayless) {\n        if (!random) {\n            await inquirer\n                .prompt([\n                    {\n                        type: 'list',\n                        name: 'namelist',\n                        message: 'What Game do you wanna watch?',\n                        choices: activecampainnames,\n                    },\n                ])\n                .then(async (answer: {namelist: string}) => {\n                    userdata.game = answer.namelist\n                });\n        } else {\n            userdata.game = activecampainnames[getRandomInt(userdata.availableDropNameChoices.length)]\n            winston.info(chalk.gray('Selected a random game to watch: ' + chalk.white(userdata.game)))\n        }\n    } else {\n        if (userdata.settings.Prioritylist.length === 0) {\n            winston.warn(chalk.yellow('Warning: Please add Games to your Priority List, otherwise the bot will select a random game... or disable this feature in the settings...'))\n            userdata.game = activecampainnames[getRandomInt(userdata.availableDropNameChoices.length)]\n            winston.info(chalk.gray('Selected a random Game to watch: ' + chalk.white(userdata.game)))\n        } else {\n                userdata.game = userdata.settings.Prioritylist[0]\n                winston.info(chalk.gray('Selected a Game from your Priority List watch: ' + userdata.game))\n        }\n    }\n}\n\nexport async function getActiveCampaigns() {\n    let activecampainnames:Array<string> = [];\n    winston.silly(\" \")\n    winston.info(chalk.gray('Getting all active Campaigns...'), {event: \"get\"})\n    const DropCampaignDetails = await TwitchGQL._SendQuery(\"ViewerDropsDashboard\", {}, '', 'OAuth ' + userdata.auth_token, true, {}, true)\n    let allDropCampaings = DropCampaignDetails[0].data.currentUser.dropCampaigns\n    await allDropCampaings.forEach((campaign: Campaign) => {\n        if (campaign.status === 'ACTIVE') {\n            if (activecampainnames.includes(campaign.game.displayName) === false) {\n                activecampainnames.push(campaign.game.displayName)\n            }\n        }\n    })\n    if (userdata.settings.Prioritylist.length > 0) {\n        for (let i = userdata.settings.Prioritylist.length; i--;) {\n            if (!activecampainnames.includes(userdata.settings.Prioritylist[i])) {\n                winston.info(chalk.yellow(\"Removed \" + userdata.settings.Prioritylist[i] + \" from the Priority List, because there is no ACTIVE campaign with such name.\"))\n                userdata.settings.Prioritylist.splice(i, 1);\n            }\n        }\n    }\n    return activecampainnames;\n}\n\n\ntype Campaign = {\n    id: string,\n    name: string,\n    owner: {\n        id: string,\n        name: string,\n        __typename: string\n    },\n    game: {\n        id: string,\n        displayName: string,\n        boxArtURL: string,\n        __typename: string\n    },\n    status: string,\n    startAt: string,\n    endAt: string,\n    detailsURL: string,\n    accountLinkURL: string,\n    self: Object,\n    __typename: string\n}\n\ntype DropCampaignsInProgress = {\n    id: string,\n    name: string,\n    status: string,\n    timeBasedDrops: Array<timebased>\n}\n\ntype GameEventDrops = {\n    game: Object,\n    id: string,\n    imageURL: string,\n    isConnected: boolean,\n    lastAwardedAt: string,\n    name: string,\n    requiredAccountLink: string,\n    totalCount: string,\n    __typename: string\n}"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../../src/functions/get/getSettings.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport {userdata} from \"../../index\"\nimport {validPath} from \"../../utils/util\";\nimport init_logger from \"../logger/logger\";\nconst fs = require(\"fs\");\nconst winston = require(\"winston\");\nconst chromePaths = require('chrome-paths');\nconst inquirer = require(\"inquirer\");\nconst inputReader = require(\"wait-console-input\");\n\nconst path = './settings.json'\nconst opsys = process.platform;\n\nexport default async function () {\n\n    if (fs.existsSync(path)) { //If settings file exists\n        await fs.promises.readFile('./settings.json', 'utf8').then(async (settingsfile: any) => {\n            userdata.settings = await JSON.parse(settingsfile)\n            await init_logger() //Create Logger after settings read\n        })\n        winston.silly(\" \");\n        winston.info(chalk.green(\"Successfully Loaded Settings...\"))\n        winston.silly(\" \");\n        if(userdata.settings.displayless && userdata.settings.Prioritylist.length === 0) {\n            winston.warn(chalk.yellow('Warning: Please add Games to your Priorty List, otherwise the bot will select a random game...'))\n        }\n        return userdata.settings\n    } else {\n        await init_logger()\n        await fs.promises.writeFile('settings.json', JSON.stringify(userdata.settings, null, 2)).then(function () {\n            winston.silly(\" \");\n            winston.info(chalk.green(\"Successfully Created Settings...\"))\n            winston.silly(\" \");\n        }).catch((err: any) => {throw err})\n        return userdata.settings\n    }\n}\n\nexport async function logimportantvalues() {\n    if (userdata.settings.debug) {winston.info(chalk.cyan(\"Debug enabled\"))}\n    if (userdata.settings.displayless) {winston.info(chalk.cyan(\"Displayless mode enabled\"))}\n    if (userdata.settings.WebHookURL !== \"\") {winston.info(chalk.cyan(\"Discord Webhook enabled\"))}\n}\n\nexport async function Chromepaths() {\n\n    await inquirer\n        .prompt([\n            {\n                type: 'confirm',\n                name: 'confirmed',\n                message: 'Found it! Is this your Google Chrome Path? | ' + chalk.cyan(chromePaths.chrome),\n\n            },\n        ])\n        .then(async (Answer: {confirmed: boolean}) => {\n\n            //If users selects yes\n            if (Answer.confirmed) {\n\n                //Check the Path\n                if (opsys !== 'linux') {\n                    if (fs.existsSync(chromePaths.chrome)) {\n                        winston.silly(\" \")\n                        userdata.settings.Chromeexe = await chromePaths.chrome //Set the Path\n                    } else { //If auto detected path is invaild\n                        winston.silly(\" \")\n                        winston.error(chalk.red(\"Invalid Path... Please restart the Bot and provide a new one manually...\"))\n                        winston.silly(\" \")\n                        if (!userdata.settings.displayless) inputReader.wait(chalk.gray(\"Press any Key to continue...\"))\n                        process.exit(21);\n                    }\n                } else {\n                    winston.silly(\" \")\n                    userdata.settings.Chromeexe = await chromePaths.chrome //Set the Path\n                }\n\n            } else { // If users selects no on auto detect providing it maunally\n\n                winston.silly(\" \")\n                await inquirer\n                    .prompt([\n                        {\n                            type: 'input',\n                            name: 'pathexe',\n                            message: 'Please provide your Google Chrome Executable path?',\n                            validate: (value: string) => validPath(value),\n                        },\n                    ])\n                    .then(async (Answer: {pathexe: string}) => {\n\n                        winston.silly(\" \")\n                        winston.info(chalk.gray(\"Setting Executable Path...\"))\n\n                        userdata.settings.Chromeexe = Answer.pathexe\n\n                    });\n            }\n        });\n    await fs.promises.writeFile('settings.json', JSON.stringify(userdata.settings, null, 2)).then(function () {\n        winston.silly(\" \");\n        winston.info(chalk.green(\"Successfully Saved Settings...\"))\n        winston.silly(\" \");\n    }).catch((err: any) => {throw err})\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,eAAuB;AACvB,kBAAwB;AACxB,oBAAwB;AACxB,MAAM,KAAK,QAAQ;AACnB,MAAM,UAAU,QAAQ;AACxB,MAAM,cAAc,QAAQ;AAC5B,MAAM,WAAW,QAAQ;AACzB,MAAM,cAAc,QAAQ;AAE5B,MAAM,OAAO;AACb,MAAM,QAAQ,QAAQ;AAEtB,qCAAiC;AAE7B,MAAI,GAAG,WAAW,OAAO;AACrB,UAAM,GAAG,SAAS,SAAS,mBAAmB,QAAQ,KAAK,OAAO,iBAAsB;AACpF,wBAAS,WAAW,MAAM,KAAK,MAAM;AACrC,YAAM;AAAA;AAEV,YAAQ,MAAM;AACd,YAAQ,KAAK,qBAAM,MAAM;AACzB,YAAQ,MAAM;AACd,QAAG,kBAAS,SAAS,eAAe,kBAAS,SAAS,aAAa,WAAW,GAAG;AAC7E,cAAQ,KAAK,qBAAM,OAAO;AAAA;AAE9B,WAAO,kBAAS;AAAA,SACb;AACH,UAAM;AACN,UAAM,GAAG,SAAS,UAAU,iBAAiB,KAAK,UAAU,kBAAS,UAAU,MAAM,IAAI,KAAK,WAAY;AACtG,cAAQ,MAAM;AACd,cAAQ,KAAK,qBAAM,MAAM;AACzB,cAAQ,MAAM;AAAA,OACf,MAAM,CAAC,QAAa;AAAC,YAAM;AAAA;AAC9B,WAAO,kBAAS;AAAA;AAAA;AAIxB,oCAA2C;AACvC,MAAI,kBAAS,SAAS,OAAO;AAAC,YAAQ,KAAK,qBAAM,KAAK;AAAA;AACtD,MAAI,kBAAS,SAAS,aAAa;AAAC,YAAQ,KAAK,qBAAM,KAAK;AAAA;AAC5D,MAAI,kBAAS,SAAS,eAAe,IAAI;AAAC,YAAQ,KAAK,qBAAM,KAAK;AAAA;AAAA;AAGtE,6BAAoC;AAEhC,QAAM,SACD,OAAO;AAAA,IACJ;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS,kDAAkD,qBAAM,KAAK,YAAY;AAAA;AAAA,KAIzF,KAAK,OAAO,WAAiC;AAG1C,QAAI,OAAO,WAAW;AAGlB,UAAI,UAAU,SAAS;AACnB,YAAI,GAAG,WAAW,YAAY,SAAS;AACnC,kBAAQ,MAAM;AACd,4BAAS,SAAS,YAAY,MAAM,YAAY;AAAA,eAC7C;AACH,kBAAQ,MAAM;AACd,kBAAQ,MAAM,qBAAM,IAAI;AACxB,kBAAQ,MAAM;AACd,cAAI,CAAC,kBAAS,SAAS;AAAa,wBAAY,KAAK,qBAAM,KAAK;AAChE,kBAAQ,KAAK;AAAA;AAAA,aAEd;AACH,gBAAQ,MAAM;AACd,0BAAS,SAAS,YAAY,MAAM,YAAY;AAAA;AAAA,WAGjD;AAEH,cAAQ,MAAM;AACd,YAAM,SACD,OAAO;AAAA,QACJ;AAAA,UACI,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,UAAU,CAAC,UAAkB,2BAAU;AAAA;AAAA,SAG9C,KAAK,OAAO,YAA8B;AAEvC,gBAAQ,MAAM;AACd,gBAAQ,KAAK,qBAAM,KAAK;AAExB,0BAAS,SAAS,YAAY,QAAO;AAAA;AAAA;AAAA;AAKzD,QAAM,GAAG,SAAS,UAAU,iBAAiB,KAAK,UAAU,kBAAS,UAAU,MAAM,IAAI,KAAK,WAAY;AACtG,YAAQ,MAAM;AACd,YAAQ,KAAK,qBAAM,MAAM;AACzB,YAAQ,MAAM;AAAA,KACf,MAAM,CAAC,QAAa;AAAC,UAAM;AAAA;AAAA;",
  "names": []
}

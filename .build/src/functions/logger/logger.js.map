{
  "version": 3,
  "sources": ["../../../../src/functions/logger/logger.ts"],
  "sourcesContent": ["import {sendWebhook, webhookHandler} from \"../handler/webHookHandler\";\nimport {userdata} from \"../../index\" ;\n\nconst fs = require(\"fs\");\nconst winston = require('winston');\nconst {format} = require(\"winston\");\nconst { printf } = format;\n\nexport default async function () {\n\n    const fileFormat = printf((log: Log) => {return `${log.timestamp}: ${log.message}`});\n    const consoleFormat = printf((log: Log) => {return log.message})\n    // Logger configuration\n    process.on('unhandledRejection', async (reason : string, promise) => {\n            winston.error(\"Unhandled Rejection at: %o\", promise)\n            winston.error(\"Unhandled Rejection Reason: \" + reason)\n        if (userdata.settings.WebHookURL !== \"\") {\n            await sendWebhook([reason, \"More Details can be found in the error Log...\", \"Closing Bot...\"], \"ERROR\", userdata.settings.WebHookURL, 16711680).then((request) => {\n                if (!request) {\n                    winston.info('Could not send Webhook with ERROR: Closing Bot...')\n                    process.exit(21);\n                } else {\n                    process.exit(21);\n                }\n            })\n        } else {\n            process.exit(21);\n        }\n    })\n    try {\n        await createConsoleLogger(consoleFormat)\n        if (fs.existsSync('./settings.json')) {\n            let settingsfile = fs.readFileSync('./settings.json', 'utf8');\n            let options = await JSON.parse(settingsfile)\n            if (options.LogToFile) {\n                await createFilelogger(fileFormat)\n            }\n        }\n    } catch (e) {\n        await createConsoleLogger(consoleFormat)\n        await createFilelogger(fileFormat)\n        winston.error('ERROR')\n        throw 'Invalid/Corrupted JSON file...'\n    }\n    return true\n}\n\nasync function createConsoleLogger(consoleFormat: any) {\n    const consoleLogger = new winston.transports.Console({\n        level: 'silly',\n        handleExceptions: true,\n        RejectionHandler: true,\n        format: format.combine(\n            format.prettyPrint(),\n            format.splat(),\n            consoleFormat\n        )\n    })\n    winston.add(consoleLogger);\n    consoleLogger.on('logged', async function (log:any) {if (userdata.settings.WebHookURL !== \"\") await webhookHandler(log)})\n}\n\nasync function createFilelogger(fileFormat:any) {\n    winston.add(new winston.transports.File({\n        filename: './logs/TTVDropBot-out.log',\n        level: 'info',\n        handleExceptions: true,\n        RejectionHandler: true,\n        maxsize: \"20m\",\n        maxFiles: 5,\n        timestamp: true,\n        format: format.combine(\n            format.uncolorize(),\n            format.splat(),\n            format.timestamp({format: 'YYYY-MM-DD HH:mm:ss'}),\n            fileFormat,\n        )\n    }));\n    winston.add(new winston.transports.File({\n        filename: './logs/TTVDropBot-error.log',\n        level: 'error',\n        handleExceptions: true,\n        RejectionHandler: true,\n        maxsize: \"20m\",\n        maxFiles: 5,\n        timestamp: true,\n        format: format.combine(\n            format.uncolorize(),\n            format.splat(),\n            format.timestamp({format: 'YYYY-MM-DD HH:mm:ss'}),\n            fileFormat,\n        )\n    }));\n}\n\nexport type Log = {\n    message: string,\n    event?: string,\n    level: string,\n    timestamp: string\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,4BAA0C;AAC1C,eAAuB;AAEvB,MAAM,KAAK,QAAQ;AACnB,MAAM,UAAU,QAAQ;AACxB,MAAM,EAAC,WAAU,QAAQ;AACzB,MAAM,EAAE,WAAW;AAEnB,gCAAiC;AAE7B,QAAM,aAAa,OAAO,CAAC,QAAa;AAAC,WAAO,GAAG,IAAI,cAAc,IAAI;AAAA;AACzE,QAAM,gBAAgB,OAAO,CAAC,QAAa;AAAC,WAAO,IAAI;AAAA;AAEvD,UAAQ,GAAG,sBAAsB,OAAO,QAAiB,YAAY;AAC7D,YAAQ,MAAM,8BAA8B;AAC5C,YAAQ,MAAM,iCAAiC;AACnD,QAAI,kBAAS,SAAS,eAAe,IAAI;AACrC,YAAM,uCAAY,CAAC,QAAQ,iDAAiD,mBAAmB,SAAS,kBAAS,SAAS,YAAY,UAAU,KAAK,CAAC,YAAY;AAC9J,YAAI,CAAC,SAAS;AACV,kBAAQ,KAAK;AACb,kBAAQ,KAAK;AAAA,eACV;AACH,kBAAQ,KAAK;AAAA;AAAA;AAAA,WAGlB;AACH,cAAQ,KAAK;AAAA;AAAA;AAGrB,MAAI;AACA,UAAM,oBAAoB;AAC1B,QAAI,GAAG,WAAW,oBAAoB;AAClC,UAAI,eAAe,GAAG,aAAa,mBAAmB;AACtD,UAAI,UAAU,MAAM,KAAK,MAAM;AAC/B,UAAI,QAAQ,WAAW;AACnB,cAAM,iBAAiB;AAAA;AAAA;AAAA,WAG1B,GAAP;AACE,UAAM,oBAAoB;AAC1B,UAAM,iBAAiB;AACvB,YAAQ,MAAM;AACd,UAAM;AAAA;AAEV,SAAO;AAAA;AAGX,mCAAmC,eAAoB;AACnD,QAAM,gBAAgB,IAAI,QAAQ,WAAW,QAAQ;AAAA,IACjD,OAAO;AAAA,IACP,kBAAkB;AAAA,IAClB,kBAAkB;AAAA,IAClB,QAAQ,OAAO,QACX,OAAO,eACP,OAAO,SACP;AAAA;AAGR,UAAQ,IAAI;AACZ,gBAAc,GAAG,UAAU,eAAgB,KAAS;AAAC,QAAI,kBAAS,SAAS,eAAe;AAAI,YAAM,0CAAe;AAAA;AAAA;AAGvH,gCAAgC,YAAgB;AAC5C,UAAQ,IAAI,IAAI,QAAQ,WAAW,KAAK;AAAA,IACpC,UAAU;AAAA,IACV,OAAO;AAAA,IACP,kBAAkB;AAAA,IAClB,kBAAkB;AAAA,IAClB,SAAS;AAAA,IACT,UAAU;AAAA,IACV,WAAW;AAAA,IACX,QAAQ,OAAO,QACX,OAAO,cACP,OAAO,SACP,OAAO,UAAU,EAAC,QAAQ,0BAC1B;AAAA;AAGR,UAAQ,IAAI,IAAI,QAAQ,WAAW,KAAK;AAAA,IACpC,UAAU;AAAA,IACV,OAAO;AAAA,IACP,kBAAkB;AAAA,IAClB,kBAAkB;AAAA,IAClB,SAAS;AAAA,IACT,UAAU;AAAA,IACV,WAAW;AAAA,IACX,QAAQ,OAAO,QACX,OAAO,cACP,OAAO,SACP,OAAO,UAAU,EAAC,QAAQ,0BAC1B;AAAA;AAAA;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../../src/functions/handler/custompageHandler.ts"],
  "sourcesContent": ["import {CustomChannel} from \"../../Data/userdata\";\nimport {userdata} from \"../../index\";\nimport {customallOfflineCheck, liveCheck} from \"../../Checks/liveCheck\";\nimport {sendMinuteWatched} from \"./watchpageHandler\"\nimport {pointsCheck} from \"../../Checks/pointsCheck\";\nimport {delay} from \"../../utils/util\";\nimport winston from \"winston\";\nimport chalk from \"chalk\";\nimport {askCustomChannelStart, customCheckLive} from \"../get/getCustomChannel\";\n\nlet status:string = 'stopped';\n\nexport async function CustomEventHandlerStart(DropcurrentlyWatching: string) {\n    if (status === 'stopped') {\n        await customallOfflineCheck();\n        await liveCheck(DropcurrentlyWatching, true);\n        await pointsCheck(DropcurrentlyWatching);\n        await sendMinuteWatched(DropcurrentlyWatching.toString().toLowerCase())\n        status = 'running'\n        await customloop(DropcurrentlyWatching);\n    } else if (status === 'running') {\n        await customloop(DropcurrentlyWatching);\n    }\n}\n\nlet watchedtime = 0;\nasync function customloop(channelLogin: string) {\n    await delay(userdata.settings.ProgressCheckInterval);\n    watchedtime = (watchedtime + userdata.settings.ProgressCheckInterval)\n\n    //find right custom drop\n    await getCustomDrop(channelLogin).then(async (currentdrop) => {\n        await customCheckLive(false);\n        await customallOfflineCheck();\n        await liveCheck(channelLogin, true);\n        let neededtimeinms = (currentdrop.Time * 60000)\n        if (status === 'running') {\n            if (currentdrop.WatchType === \"Watch until time runs out\") {\n                if (watchedtime < neededtimeinms) {\n                    await pointsCheck(channelLogin).then(async points => {\n                        await sendMinuteWatched(channelLogin.toString().toLowerCase())\n                        winston.info(chalk.gray(\"Watching since: \") + chalk.white((Number(watchedtime / 60000).toFixed(2))) + chalk.gray(\" | Minutes Left: \" + chalk.white((neededtimeinms - watchedtime) / 60000)) + chalk.gray(\" | Points: \") + chalk.white(points.toString()), {event: \"progress\"});\n                        winston.silly('', {event: \"progressEnd\"})\n                        await customloop(channelLogin)\n                    });\n\n                } else if (watchedtime >= neededtimeinms) {\n                    status = 'stopped'\n                    winston.info(chalk.green('Finished watching the channel: ' + channelLogin), {event: \"newDrop\"})\n                    winston.info(chalk.gray('Looking for a new Channel...'), {event: \"newDrop\"})\n                    await customrestartHandler(true)\n                }\n            } else {\n                await pointsCheck(channelLogin).then(async points => {\n                    await sendMinuteWatched(channelLogin.toString().toLowerCase())\n                    winston.info(chalk.gray(\"Watching since: \") + chalk.white((Number(watchedtime / 60000).toFixed(2))) + chalk.gray(\" | Points: \") + chalk.white(points.toString()), {event: \"progress\"});\n                    winston.silly('', {event: \"progressEnd\"})\n                    await customloop(channelLogin)\n                });\n            }\n        }\n    })\n}\n\nexport async function customrestartHandler(random: boolean) {\n    watchedtime = 0;\n    await customCheckLive(false);\n    await askCustomChannelStart(random, true);\n    await CustomEventHandlerStart(userdata.startDrop);\n}\n\nasync function getCustomDrop(ChannelLogin: string) {\n    let currentdrop:CustomChannel = {\n        Name: '',\n        TTVLink: '',\n        WatchType: '',\n        Time: 0,\n        Points: false,\n        live: false\n    };\n    userdata.customchannel.forEach(drop => {\n        if (drop.TTVLink === 'https://www.twitch.tv/' + ChannelLogin) {\n            currentdrop = drop;\n        }\n    })\n    return currentdrop;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA,eAAuB;AACvB,uBAA+C;AAC/C,8BAAgC;AAChC,yBAA0B;AAC1B,kBAAoB;AACpB,qBAAoB;AACpB,mBAAkB;AAClB,8BAAqD;AAErD,IAAI,SAAgB;AAEpB,uCAA8C,uBAA+B;AACzE,MAAI,WAAW,WAAW;AACtB,UAAM;AACN,UAAM,gCAAU,uBAAuB;AACvC,UAAM,oCAAY;AAClB,UAAM,+CAAkB,sBAAsB,WAAW;AACzD,aAAS;AACT,UAAM,WAAW;AAAA,aACV,WAAW,WAAW;AAC7B,UAAM,WAAW;AAAA;AAAA;AAIzB,IAAI,cAAc;AAClB,0BAA0B,cAAsB;AAC5C,QAAM,uBAAM,kBAAS,SAAS;AAC9B,gBAAe,cAAc,kBAAS,SAAS;AAG/C,QAAM,cAAc,cAAc,KAAK,OAAO,gBAAgB;AAC1D,UAAM,6CAAgB;AACtB,UAAM;AACN,UAAM,gCAAU,cAAc;AAC9B,QAAI,iBAAkB,YAAY,OAAO;AACzC,QAAI,WAAW,WAAW;AACtB,UAAI,YAAY,cAAc,6BAA6B;AACvD,YAAI,cAAc,gBAAgB;AAC9B,gBAAM,oCAAY,cAAc,KAAK,OAAM,WAAU;AACjD,kBAAM,+CAAkB,aAAa,WAAW;AAChD,mCAAQ,KAAK,qBAAM,KAAK,sBAAsB,qBAAM,MAAO,OAAO,cAAc,KAAO,QAAQ,MAAO,qBAAM,KAAK,sBAAsB,qBAAM,MAAO,kBAAiB,eAAe,QAAU,qBAAM,KAAK,iBAAiB,qBAAM,MAAM,OAAO,aAAa,EAAC,OAAO;AAClQ,mCAAQ,MAAM,IAAI,EAAC,OAAO;AAC1B,kBAAM,WAAW;AAAA;AAAA,mBAGd,eAAe,gBAAgB;AACtC,mBAAS;AACT,iCAAQ,KAAK,qBAAM,MAAM,oCAAoC,eAAe,EAAC,OAAO;AACpF,iCAAQ,KAAK,qBAAM,KAAK,iCAAiC,EAAC,OAAO;AACjE,gBAAM,qBAAqB;AAAA;AAAA,aAE5B;AACH,cAAM,oCAAY,cAAc,KAAK,OAAM,WAAU;AACjD,gBAAM,+CAAkB,aAAa,WAAW;AAChD,iCAAQ,KAAK,qBAAM,KAAK,sBAAsB,qBAAM,MAAO,OAAO,cAAc,KAAO,QAAQ,MAAO,qBAAM,KAAK,iBAAiB,qBAAM,MAAM,OAAO,aAAa,EAAC,OAAO;AAC1K,iCAAQ,MAAM,IAAI,EAAC,OAAO;AAC1B,gBAAM,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAOrC,oCAA2C,QAAiB;AACxD,gBAAc;AACd,QAAM,6CAAgB;AACtB,QAAM,mDAAsB,QAAQ;AACpC,QAAM,wBAAwB,kBAAS;AAAA;AAG3C,6BAA6B,cAAsB;AAC/C,MAAI,cAA4B;AAAA,IAC5B,MAAM;AAAA,IACN,SAAS;AAAA,IACT,WAAW;AAAA,IACX,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA;AAEV,oBAAS,cAAc,QAAQ,UAAQ;AACnC,QAAI,KAAK,YAAY,2BAA2B,cAAc;AAC1D,oBAAc;AAAA;AAAA;AAGtB,SAAO;AAAA;",
  "names": []
}

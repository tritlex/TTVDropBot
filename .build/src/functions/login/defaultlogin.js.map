{
  "version": 3,
  "sources": ["../../../../src/functions/login/defaultlogin.ts"],
  "sourcesContent": ["import winston from \"winston\";\nimport chalk from \"chalk\";\nimport {userdata} from \"../../index\" ;\nimport {Chromepaths} from \"../get/getSettings\";\nimport {Login} from \"../../Pages/loginPage\";\nimport fs from \"fs\";\nimport axios from \"axios\";\nimport {retryConfig} from \"../../utils/util\";\nconst inquirer = require(\"inquirer\");\n\nlet pw: string = '';\nlet nm: string = '';\nexport async function login() {\n    if (!userdata.auth_token && !fs.existsSync('./twitch-session.json')) {\n        if (!userdata.settings.displayless) {\n            winston.silly(\" \");\n            winston.info(chalk.gray('Please Login into your Twitch Account...'))\n            winston.silly(\" \");\n\n            let options = [\"Directly via Command Line\", \"Via Browser\"]\n            await inquirer\n                .prompt([\n                    {\n                        type: 'list',\n                        name: 'loginoption',\n                        message: 'How would you like to Login into your account?',\n                        choices: options,\n                    },\n                ])\n                .then(async (answer: {loginoption: string}) => {\n                    if (answer.loginoption === 'Via Browser') {\n                        await browserlogin();\n                    } else {\n                        await directlogin('', '');\n                        pw = '';\n                        nm = '';\n                    }\n                });\n        } else {\n            winston.error('ERROR')\n            throw 'No twitch-session.json found to use in displayless mode...'\n        }\n    } else {\n        await getTwitchUserDetails()\n        winston.silly(\" \");\n        winston.info(chalk.gray('Found a twitch-session... No need to login...'))\n        winston.silly(\" \");\n    }\n\n\n}\n\nasync function askforacccountdetails() {\n    if (pw === '' || nm === '') {\n        await inquirer\n            .prompt([\n                {\n                    type: 'input',\n                    name: 'username',\n                    message: 'What is your Username?'\n                },\n                {\n                    type: 'password',\n                    name: 'password',\n                    message: 'What is your Password?'\n                }\n            ])\n            .then(async (Answer: {username: string, password: string}) => {\n                pw = Answer.password\n                nm = Answer.username\n            });\n        return {pw: pw, nm: nm}\n    }\n    return {pw: pw, nm: nm}\n}\n\nasync function askforauthcode(errorcode: number) {\n    let message: string = '';\n    let input: string = '';\n    if (errorcode === 3011) message = 'What is your 2FA token?'\n    if (errorcode === 3022) message = 'What is your Email code?'\n\n    await inquirer\n        .prompt([\n            {\n                type: 'input',\n                name: 'code',\n                message: message\n            }\n        ])\n        .then(async (Answer: {code: string}) => {\n            input = Answer.code\n        });\n    return input\n}\n\nasync function directlogin(emailcode: string, facode: string, captcha_proof = {}) {\n    let attempt = 0;\n    const details = await askforacccountdetails()\n\n    let config = {\n        headers: {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0',\n            \"Content-type\": \"text/plain\",\n        },\n        raxConfig: retryConfig\n    }\n    let body = {\n        \"client_id\": \"kimne78kx3ncx6brgo4mv6wki5h1ko\",\n        \"undelete_user\": false,\n        \"remember_me\": true,\n        \"username\": details.nm,\n        \"password\": details.pw,\n        ...captcha_proof\n    }\n    if (emailcode !== '') {\n        Object.assign(body, {\"twitchguard_code\": emailcode})\n    } else if (facode !== '') {\n        Object.assign(body, {\"authy_token\": facode})\n    }\n\n    await axios.post('https://passport.twitch.tv/login', body, config)\n        .then(async function (response) {\n            let response_data = response.data\n            if (userdata.settings.debug) winston.info('loginresponse %o', JSON.stringify(response_data,null, 2))\n            winston.info(chalk.green(\"Successfully Logged in...\"))\n\n            let authcookie = [{\n                \"name\": \"auth-token\",\n                \"value\": response_data.access_token,\n            }]\n            await fs.promises.writeFile('twitch-session.json', JSON.stringify(authcookie, null, 2)).then(function () {\n                winston.silly(\" \");\n                winston.info(chalk.green(\"Successfully Saved Cookies...\"))\n                winston.silly(\" \");\n            }).catch(err => {throw err})\n            await getTwitchUserDetails();\n\n        })\n        .catch(async function (error) {\n            winston.silly(\" \")\n            winston.error(chalk.yellow('Something went wrong...'))\n            let errorcode = 0;\n            let capta = {}\n            try {\n                if (error.response.data.captcha_proof) capta = {captcha_proof: error.response.data.captcha_proof}\n            } catch (e) {}\n            try {\n                errorcode = error.response.data.error_code\n            } catch (e) {}\n\n            if (attempt === 3) {\n                winston.info(chalk.gray('Failed 3 times to login closing...'))\n                throw 'Failed to Login...'\n            }\n            if (errorcode === 1000) {\n                nm = '';\n                pw = '';\n                winston.info(chalk.gray('Login failed due to CAPTCHA...'))\n                winston.silly(\" \")\n                winston.info(chalk.gray('Your login attempt was denied by CAPTCHA. Please wait 12h or login via the browser...'))\n                winston.silly(\" \")\n                winston.info(chalk.gray('Redirecting to browser login...'))\n                await browserlogin()\n            } else if (errorcode === 3001 || errorcode === 2005) {\n                attempt++\n                nm = '';\n                pw = '';\n                winston.info(chalk.gray(\"Login failed due to incorrect username or password...\"))\n                await directlogin('', '', capta);\n            } else if (errorcode === 3012) {\n                attempt++\n                winston.info(chalk.gray(\"Invaild 2FA...\"))\n                winston.silly(\" \")\n                let code = await askforauthcode(3011);\n                await directlogin('', code, capta);\n            } else if (errorcode === 3023) {\n                attempt++\n                winston.info(chalk.gray(\"Invaild Email Code...\"))\n                winston.silly(\" \")\n                let code = await askforauthcode(3022);\n                await directlogin('', code, capta);\n            }\n            if (errorcode === 3011) {\n                winston.info(chalk.gray('2FA token required...\"'))\n                winston.silly(\" \")\n                let code = await askforauthcode(3011);\n                await directlogin('', code, capta);\n            } else if (errorcode === 3022) {\n                winston.info(chalk.gray('Email code required...'))\n                winston.silly(\" \")\n                let code = await askforauthcode(3022);\n                await directlogin(code, '', capta);\n            } else if (!fs.existsSync('./twitch-session.json')) {\n                attempt++\n                nm = '';\n                pw = '';\n                winston.info(chalk.gray('Login failed for an unknown reason...'))\n                winston.info(chalk.gray('The Reason is probably:'))\n                winston.info(chalk.yellow('Error Code: ' + error.data.error_code + ' | Reason: ' + error.data.error + ' | Error Description: ' + error.error_description))\n                winston.silly(\" \")\n                await directlogin('', '', capta);\n            }\n        })\n}\n\nasync function browserlogin() {\n\n    winston.info(chalk.gray('Proceeding to Browser...'))\n    if (userdata.settings.Chromeexe === '' ) {\n        winston.info(chalk.gray('No Browser Found...'))\n        await Chromepaths()\n        await Login()\n        await getTwitchUserDetails()\n    } else {\n        winston.info(chalk.gray('Browser Found...'))\n        await Login()\n        await getTwitchUserDetails()\n    }\n\n}\n\nasync function getTwitchUserDetails() {\n    if (userdata.auth_token || fs.existsSync('./twitch-session.json')) {\n        if (fs.existsSync('./twitch-session.json')) {\n            const data = await fs.promises.readFile('./twitch-session.json', 'utf8')\n            let cookiedata = JSON.parse(data);\n            for (let i = 0; i < cookiedata.length; i++) {\n                if (cookiedata[i].name === 'auth-token') {\n                    userdata.auth_token = cookiedata[i].value;\n                    break;\n                }\n            }\n        }\n        if (userdata.auth_token === \"\") {\n            winston.error('ERROR')\n            throw 'Could somehow not find a auth token in your twitch session...'\n        }\n    } else {\n        winston.error('ERROR')\n        throw 'Could somehow not find a twitch session...'\n    }\n\n\n    let auth = 'OAuth ' + userdata.auth_token\n    let head = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0',\n        Authorization: auth\n    }\n    await axios.get('https://id.twitch.tv/oauth2/validate', {headers: head, raxConfig: retryConfig})\n        .then(function (response){\n            let response_data = response.data\n            userdata.userid = response_data.user_id\n            userdata.clientid = response_data.client_id\n        })\n        .catch(function (error) {\n            winston.error(chalk.red('ERROR: Could not validate your auth token...'))\n            throw error.response.status + ' ' + error.response.statusText + ' ' + error.response.data.message\n        })\n\n\n}"],
  "mappings": "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",
  "names": []
}

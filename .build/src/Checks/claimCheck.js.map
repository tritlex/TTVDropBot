{
  "version": 3,
  "sources": ["../../../src/Checks/claimCheck.ts"],
  "sourcesContent": ["import {Drop} from \"../functions/get/getCurrentDrop\";\nimport winston from \"winston\";\nimport chalk from \"chalk\";\nimport {restartHandler} from \"../functions/handler/restartHandler\";\nimport {userdata} from \"../index\" ;\nimport {delay} from \"../utils/util\";\nconst TwitchGQL = require(\"@zaarrg/twitch-gql-ttvdropbot\").Init();\n\nexport async function claimableCheck(CurrentDrop: Drop, autoclaim: boolean, onlycheck: boolean) {\n    //filter all non active drops\n    let nonworkingamount = 0;\n    let notavaiableyet = 0;\n    let preconditions = false;\n    CurrentDrop.timebasedrop.forEach(timedrop => {\n        if (!timedrop.self.isClaimed && timedrop.self.status === 'Not Active' || !timedrop.self.isClaimed && timedrop.self.status === 'Ended') {\n            nonworkingamount++\n        }\n        if (!timedrop.self.isClaimed && timedrop.self.status === 'Not Active') {\n            notavaiableyet++\n        }\n        if (timedrop.preconditionDrops !== null) {\n            preconditions = true\n        }\n    })\n\n    let workingdropslenght = (CurrentDrop.timebasedrop.length - nonworkingamount)\n    let hundredpercent = 0;\n    let isclaimedamount = 0;\n\n    for (const timedrop of CurrentDrop.timebasedrop) {\n        if (timedrop.requiredMinutesWatched === timedrop.self.currentMinutesWatched) {\n            hundredpercent++\n        }\n        if (timedrop.self.isClaimed) {\n            isclaimedamount++\n        }\n\n        if (autoclaim || preconditions) {\n            //Auto Claim if possible\n            for (const benefit of timedrop.benefitEdges) {\n                if (timedrop.self.currentMinutesWatched === timedrop.requiredMinutesWatched && timedrop.self.dropInstanceID !== null) {\n\n                    let opts = {\n                        \"input\":{\n                            \"dropInstanceID\": timedrop.self.dropInstanceID.toString()\n                        }\n                    }\n                    try {\n                        await TwitchGQL._SendQuery(\"DropsPage_ClaimDropRewards\", opts, 'a455deea71bdc9015b78eb49f4acfbce8baa7ccbedd28e549bb025bd0f751930', 'OAuth ' + userdata.auth_token, true, {}, true)\n                        if (autoclaim) winston.info(chalk.gray('Claimed ' + chalk.green(timedrop.name)), {event: \"claim\"})\n                        if (preconditions && !autoclaim) winston.info(chalk.gray('Claimed ' + chalk.green(timedrop.name) + ' because otherwise cant watch next drop...'), {event: \"claim\"})\n                    } catch (e) {\n                        if (autoclaim) winston.info(chalk.gray('There was an error trying to claim ' + chalk.green(timedrop.name) + ' Will retry again.'), {event: \"claim\"})\n                    }\n                }\n            }\n        }\n    }\n\n    //Check if all Drops of the game are claimed/claimable\n    if (userdata.settings.debug) winston.info('Claim CHECK ONE ' + hundredpercent + ' | ' + workingdropslenght + ' | ' + isclaimedamount + ' | ' + nonworkingamount + ' | ' + notavaiableyet)\n    if (!onlycheck) await allgameddropsclaimableCheck()\n\n    //All Claimable\n    if (workingdropslenght !== CurrentDrop.timebasedrop.length && notavaiableyet >= (isclaimedamount + hundredpercent)) {\n        if (!onlycheck) {\n            winston.silly(\" \")\n            winston.info(chalk.green('Got all available Drops, missing Drops are not active yet... Looking for new ones...'), {event: \"newDrop\"})\n            await restartHandler(true, true, true, true, false)\n        }\n    } else if (workingdropslenght === 0 ) {\n        if (!onlycheck) {\n            winston.silly(\" \")\n            winston.info(chalk.green('All available Drops for Current Drop are unavailable... Looking for new ones...'), {event: \"newDrop\"})\n            await restartHandler(true, true, true, true, false)\n        }\n    } else if (hundredpercent >= workingdropslenght) {\n        if (!onlycheck) {\n            winston.silly(\" \")\n            winston.info(chalk.green('All available Drops for Current Drop Claimable... Looking for new ones...'), {event: \"newDrop\"})\n            await restartHandler(true, true, true, true, false)\n        }\n    } else if (isclaimedamount >= workingdropslenght) {\n        CurrentDrop.isClaimed = true\n        if (!onlycheck) {\n            winston.silly(\" \")\n            winston.info(chalk.green('All Drops for Current Drop Claimed... Looking for new ones...'), {event: \"newDrop\"})\n            await restartHandler(true, true, true, true, false)\n        }\n    } else if ( (isclaimedamount + hundredpercent) >=workingdropslenght) {\n        if (!onlycheck) {\n            winston.silly(\" \")\n            winston.info(chalk.green('All available Drops for Current Drop Claimable or Claimed... Looking for new ones...'), {event: \"newDrop\"})\n            await restartHandler(true, true, true, true, false)\n        }\n    } else {\n        nonworkingamount = 0;\n        hundredpercent = 0;\n        isclaimedamount = 0;\n    }\n}\n\nasync function allgameddropsclaimableCheck() {\n    let nonworkingamount = 0;\n    let amount = 0;\n    let isclaimedorclaimableamount = 0;\n    let offlinedrops = 0;\n    for (const drop of userdata.drops) {\n        //filter all non active drops\n        drop.timebasedrop.forEach(timedrop => {\n            amount++\n            if (!timedrop.self.isClaimed && timedrop.self.status === 'Not Active' || !timedrop.self.isClaimed && timedrop.self.status === 'Ended') {\n                nonworkingamount++\n            } else if (timedrop.requiredMinutesWatched === timedrop.self.currentMinutesWatched || timedrop.self.isClaimed === true) {\n                isclaimedorclaimableamount++\n            } else if (timedrop.self.status === 'Active' && !drop.live) {\n                offlinedrops++\n            }\n        })\n\n\n    }\n\n    if (userdata.settings.debug) winston.info('Claim CHECK LOOP ' + isclaimedorclaimableamount + ' | ' + amount + ' | ' + nonworkingamount + ' | ' + offlinedrops)\n    if ( isclaimedorclaimableamount >= (amount-nonworkingamount)) {\n        winston.silly(\" \")\n        if (userdata.settings.Prioritylist.length === 0) winston.warn(chalk.yellow('Warning: Please add Games to your Priority List, otherwise the bot will select a random game... or disable this feature in the settings... or disable this feature in the settings...'))\n        winston.info(chalk.green('All available drops of the game claimed or claimable... Looking for a new Game....'), {event: \"newGame\"})\n        await restartHandler(true, true, true, true, true)\n    } else if (isclaimedorclaimableamount >= ((amount-nonworkingamount)-offlinedrops)) {\n        winston.silly(\" \")\n        if (userdata.settings.WaitforChannels) {\n            winston.info(chalk.green('All available Live Drops of the game claimed or claimable... Looking for new Live Drop in 5 Minutes....'), {event: \"newDrop\"})\n            winston.silly(' ', {event: \"progressEnd\"})\n            await delay(300000)\n            await restartHandler(true, true, true, true, false)\n        } else {\n            if (userdata.settings.Prioritylist.length === 0) winston.warn(chalk.yellow('Warning: Please add Games to your Priority List, otherwise the bot will select a random game... or disable this feature in the settings...'))\n            winston.info(chalk.green('All available Live Drops of the game claimed or claimable... Looking for a new Game....'), {event: \"newGame\"})\n            await restartHandler(true, true, true, true, true)\n        }\n    }\n}\n\n\n\nexport async function matchClaimedDrops() {\n    //Check if Drop isclaimed\n    userdata.claimedDrops.forEach(claimeddrop => {\n        userdata.drops.forEach(drop => {\n            drop.timebasedrop.forEach(timebasedrop => {\n                timebasedrop.benefitEdges.forEach(benefit => {\n                    if (claimeddrop.imageurl.toString() === benefit.benefit.imageAssetURL.toString()) {\n                        for (const [i, drops] of drop.timebasedrop.entries()) {\n                            if (drops.self.isClaimed === null) {\n                                drop.isClaimed = true;\n                            }\n                        }\n                    }\n                })\n            })\n        })\n    })\n\n    userdata.drops.forEach(drop => {\n        drop.timebasedrop.forEach(timebasedrop => {\n            if (drop.isClaimed && timebasedrop.self.isClaimed === null) {\n                timebasedrop['self'] = {\n                    __typename: \"TimeBasedDropSelfEdge\",\n                    currentMinutesWatched: 0,\n                    dropInstanceID: null,\n                    isClaimed: true\n                }\n            }\n        })\n    })\n}\n"],
  "mappings": "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",
  "names": []
}

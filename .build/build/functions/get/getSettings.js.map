{
  "version": 3,
  "sources": ["../../../../build/functions/get/getSettings.js"],
  "sourcesContent": ["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Chromepaths = exports.logimportantvalues = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst index_1 = require(\"../../index\");\nconst util_1 = require(\"../../utils/util\");\nconst logger_1 = __importDefault(require(\"../logger/logger\"));\nconst fs = require(\"fs\");\nconst winston = require(\"winston\");\nconst chromePaths = require('chrome-paths');\nconst inquirer = require(\"inquirer\");\nconst inputReader = require(\"wait-console-input\");\nconst path = './settings.json';\nconst opsys = process.platform;\nfunction default_1() {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (fs.existsSync(path)) { //If settings file exists\n            yield fs.promises.readFile('./settings.json', 'utf8').then((settingsfile) => __awaiter(this, void 0, void 0, function* () {\n                index_1.userdata.settings = yield JSON.parse(settingsfile);\n                yield (0, logger_1.default)(); //Create Logger after settings read\n            }));\n            winston.silly(\" \");\n            winston.info(chalk_1.default.green(\"Successfully Loaded Settings...\"));\n            winston.silly(\" \");\n            if (index_1.userdata.settings.displayless && index_1.userdata.settings.Prioritylist.length === 0) {\n                winston.warn(chalk_1.default.yellow('Warning: Please add Games to your Priorty List, otherwise the bot will select a random game...'));\n            }\n            return index_1.userdata.settings;\n        }\n        else {\n            yield (0, logger_1.default)();\n            yield fs.promises.writeFile('settings.json', JSON.stringify(index_1.userdata.settings, null, 2)).then(function () {\n                winston.silly(\" \");\n                winston.info(chalk_1.default.green(\"Successfully Created Settings...\"));\n                winston.silly(\" \");\n            }).catch((err) => { throw err; });\n            return index_1.userdata.settings;\n        }\n    });\n}\nexports.default = default_1;\nfunction logimportantvalues() {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (index_1.userdata.settings.debug) {\n            winston.info(chalk_1.default.cyan(\"Debug enabled\"));\n        }\n        if (index_1.userdata.settings.displayless) {\n            winston.info(chalk_1.default.cyan(\"Displayless mode enabled\"));\n        }\n        if (index_1.userdata.settings.WebHookURL !== \"\") {\n            winston.info(chalk_1.default.cyan(\"Discord Webhook enabled\"));\n        }\n    });\n}\nexports.logimportantvalues = logimportantvalues;\nfunction Chromepaths() {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield inquirer\n            .prompt([\n            {\n                type: 'confirm',\n                name: 'confirmed',\n                message: 'Found it! Is this your Google Chrome Path? | ' + chalk_1.default.cyan(chromePaths.chrome),\n            },\n        ])\n            .then((Answer) => __awaiter(this, void 0, void 0, function* () {\n            //If users selects yes\n            if (Answer.confirmed) {\n                //Check the Path\n                if (opsys !== 'linux') {\n                    if (fs.existsSync(chromePaths.chrome)) {\n                        winston.silly(\" \");\n                        index_1.userdata.settings.Chromeexe = yield chromePaths.chrome; //Set the Path\n                    }\n                    else { //If auto detected path is invaild\n                        winston.silly(\" \");\n                        winston.error(chalk_1.default.red(\"Invalid Path... Please restart the Bot and provide a new one manually...\"));\n                        winston.silly(\" \");\n                        if (!index_1.userdata.settings.displayless)\n                            inputReader.wait(chalk_1.default.gray(\"Press any Key to continue...\"));\n                        process.exit(21);\n                    }\n                }\n                else {\n                    winston.silly(\" \");\n                    index_1.userdata.settings.Chromeexe = yield chromePaths.chrome; //Set the Path\n                }\n            }\n            else { // If users selects no on auto detect providing it maunally\n                winston.silly(\" \");\n                yield inquirer\n                    .prompt([\n                    {\n                        type: 'input',\n                        name: 'pathexe',\n                        message: 'Please provide your Google Chrome Executable path?',\n                        validate: (value) => (0, util_1.validPath)(value),\n                    },\n                ])\n                    .then((Answer) => __awaiter(this, void 0, void 0, function* () {\n                    winston.silly(\" \");\n                    winston.info(chalk_1.default.gray(\"Setting Executable Path...\"));\n                    index_1.userdata.settings.Chromeexe = Answer.pathexe;\n                }));\n            }\n        }));\n        yield fs.promises.writeFile('settings.json', JSON.stringify(index_1.userdata.settings, null, 2)).then(function () {\n            winston.silly(\" \");\n            winston.info(chalk_1.default.green(\"Successfully Saved Settings...\"));\n            winston.silly(\" \");\n        }).catch((err) => { throw err; });\n    });\n}\nexports.Chromepaths = Chromepaths;\n"],
  "mappings": "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",
  "names": []
}

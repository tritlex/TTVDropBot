{
  "version": 3,
  "sources": ["../../../../build/functions/get/getTwitchDrops.js"],
  "sourcesContent": ["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getActiveCampaigns = exports.askWhatGameToWatch = exports.askWhatDropToStart = exports.getTwitchDrops = void 0;\nconst index_1 = require(\"../../index\");\nconst winston_1 = __importDefault(require(\"winston\"));\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst util_1 = require(\"../../utils/util\");\nconst findLiveChannel_1 = require(\"../findLiveChannel\");\nconst claimCheck_1 = require(\"../../Checks/claimCheck\");\nconst dateCheck_1 = require(\"../../Checks/dateCheck\");\nconst TwitchGQL = require(\"@zaarrg/twitch-gql-ttvdropbot\").Init();\nconst inquirer = require(\"inquirer\");\nfunction getTwitchDrops(game, feedback) {\n    return __awaiter(this, void 0, void 0, function* () {\n        index_1.userdata.drops = [];\n        let dropidstoget = [];\n        const DropCampaignDetails = yield TwitchGQL._SendQuery(\"ViewerDropsDashboard\", {}, '', 'OAuth ' + index_1.userdata.auth_token, true, {}, true);\n        index_1.userdata.userid = DropCampaignDetails[0].data.currentUser.id;\n        let allDropCampaings = DropCampaignDetails[0].data.currentUser.dropCampaigns;\n        if (index_1.userdata.settings.debug)\n            winston_1.default.info('DropCampain %o', JSON.stringify(DropCampaignDetails, null, 2));\n        yield allDropCampaings.forEach((campaign) => {\n            if (campaign.status === 'ACTIVE') {\n                if (campaign.game.displayName === game) {\n                    dropidstoget.push(campaign.id);\n                }\n            }\n        });\n        if (feedback) {\n            winston_1.default.silly(\" \");\n            winston_1.default.info(chalk_1.default.gray('Getting all available Drops...'), { event: \"get\" });\n        }\n        for (const e of dropidstoget) {\n            let opts = {\n                channelLogin: index_1.userdata.userid,\n                dropID: e\n            };\n            const DropDetails = yield TwitchGQL._SendQuery(\"DropCampaignDetails\", opts, 'f6396f5ffdde867a8f6f6da18286e4baf02e5b98d14689a69b5af320a4c7b7b8', 'OAuth ' + index_1.userdata.auth_token, true, {}, true);\n            let CampaignDetails = DropDetails[0].data.user.dropCampaign;\n            index_1.userdata.drops.push({\n                dropid: CampaignDetails.id,\n                dropname: CampaignDetails.name,\n                Connected: CampaignDetails.self.isAccountConnected,\n                allowedchannels: CampaignDetails.allow.channels,\n                timebasedrop: CampaignDetails.timeBasedDrops,\n                live: false,\n                foundlivech: [],\n                isClaimed: false\n            });\n        }\n        if (feedback) {\n            winston_1.default.silly(\" \");\n            winston_1.default.info(chalk_1.default.gray('Looking for a Live Channel...'), { event: \"get\" });\n        }\n        //Check if drop has a Live channel\n        for (const e of index_1.userdata.drops) {\n            let livechs = yield (0, findLiveChannel_1.findLiveChannel)(e.allowedchannels);\n            if (livechs.length !== 0) {\n                e.live = true;\n                e.foundlivech.push(livechs[0]);\n            }\n            else {\n                e.live = false;\n            }\n        }\n        if (feedback) {\n            winston_1.default.silly(\" \");\n            winston_1.default.info(chalk_1.default.gray('Checking your Inventory for started Drops...'), { event: \"get\" });\n        }\n        //Check if drop is started if so get data and set it\n        const rawInventory = yield TwitchGQL._SendQuery(\"Inventory\", {}, '27f074f54ff74e0b05c8244ef2667180c2f911255e589ccd693a1a52ccca7367', 'OAuth ' + index_1.userdata.auth_token, true, {}, true);\n        let Inventory = rawInventory[0].data.currentUser.inventory;\n        if (index_1.userdata.settings.debug)\n            winston_1.default.info('rawinventory %o', JSON.stringify(rawInventory, null, 2));\n        Inventory.gameEventDrops.forEach((claimeddrop) => {\n            index_1.userdata.claimedDrops.push({\n                id: claimeddrop.id,\n                imageurl: claimeddrop.imageURL,\n                name: claimeddrop.name,\n                game: claimeddrop.game\n            });\n        });\n        //Match inventory drops in progress to the right Drops\n        index_1.userdata.drops.forEach(DropElement => {\n            if (Inventory.dropCampaignsInProgress !== null) {\n                Inventory.dropCampaignsInProgress.forEach((e) => {\n                    if (DropElement.dropid === e.id) {\n                        DropElement.timebasedrop = e.timeBasedDrops;\n                    }\n                });\n            }\n            else {\n                if (index_1.userdata.settings.debug)\n                    winston_1.default.info('No Drops in Progress...');\n            }\n        });\n        //Make sure self object exits\n        index_1.userdata.drops.forEach(drop => {\n            drop.timebasedrop.forEach(time => {\n                if (!(\"self\" in time)) {\n                    time['self'] = {\n                        __typename: \"TimeBasedDropSelfEdge\",\n                        currentMinutesWatched: 0,\n                        dropInstanceID: null,\n                        isClaimed: null\n                    };\n                }\n            });\n        });\n        if (feedback) {\n            winston_1.default.silly(\" \");\n            winston_1.default.info(chalk_1.default.gray('Checking your Inventory for claimed Drops...'), { event: \"get\" });\n        }\n        yield (0, claimCheck_1.matchClaimedDrops)();\n        //Update Date Status\n        for (const drop of index_1.userdata.drops) {\n            yield (0, dateCheck_1.dateCheck)(drop, true);\n            yield (0, claimCheck_1.claimableCheck)(drop, index_1.userdata.settings.AutoClaim, true);\n        }\n        //Log Result\n        if (feedback) {\n            index_1.userdata.drops.forEach(drop => {\n                winston_1.default.silly(\" \");\n                winston_1.default.info((0, util_1.livechresponse)(drop.foundlivech) + \" | \" + chalk_1.default.magenta(drop.dropname) + \" | \" + (0, util_1.statustoString)(drop.live) + ' | ' + (0, util_1.claimedstatustoString)(drop.isClaimed), { event: \"getResult\" });\n            });\n        }\n    });\n}\nexports.getTwitchDrops = getTwitchDrops;\nfunction askWhatDropToStart(random, filterlive, filterNonActive, filterlast) {\n    return __awaiter(this, void 0, void 0, function* () {\n        index_1.userdata.availableDropNameChoices = [];\n        index_1.userdata.drops.forEach(drop => {\n            if (filterlive) {\n                if (drop.live) {\n                    index_1.userdata.availableDropNameChoices.push(drop.dropname);\n                }\n            }\n            else {\n                index_1.userdata.availableDropNameChoices.push(drop.dropname);\n            }\n        });\n        if (filterNonActive) {\n            for (const [i, DropName] of index_1.userdata.availableDropNameChoices.entries()) {\n                if (index_1.userdata.nonActiveDrops.includes(DropName)) {\n                    index_1.userdata.availableDropNameChoices.splice(i, 1);\n                    winston_1.default.silly(\" \");\n                    winston_1.default.info(chalk_1.default.yellow(DropName + ' | ' + 'was removed because the drop ended or not started yet...'));\n                }\n            }\n        }\n        if (filterlast) {\n            for (const [i, choice] of index_1.userdata.availableDropNameChoices.entries()) {\n                if (choice === index_1.userdata.startDrop) {\n                    index_1.userdata.availableDropNameChoices.splice(i, 1);\n                }\n            }\n        }\n        if (index_1.userdata.availableDropNameChoices.length === 0) {\n            winston_1.default.silly(\" \");\n            winston_1.default.info(chalk_1.default.gray('All available Channels Offline... Select any Drop to start watching...'));\n            index_1.userdata.drops.forEach(drop => {\n                index_1.userdata.availableDropNameChoices.push(drop.dropname);\n            });\n        }\n        winston_1.default.silly(\" \");\n        if (!random) {\n            yield inquirer\n                .prompt([\n                {\n                    type: 'list',\n                    name: 'namelist',\n                    message: 'What Drop do you wanna start Watching?',\n                    choices: index_1.userdata.availableDropNameChoices,\n                },\n            ])\n                .then((answer) => __awaiter(this, void 0, void 0, function* () {\n                index_1.userdata.startDrop = answer.namelist;\n            }));\n        }\n        else {\n            index_1.userdata.startDrop = index_1.userdata.availableDropNameChoices[(0, util_1.getRandomInt)(index_1.userdata.availableDropNameChoices.length)];\n            winston_1.default.info(chalk_1.default.gray('Selected a random drop to watch: ' + chalk_1.default.white(index_1.userdata.startDrop)));\n        }\n    });\n}\nexports.askWhatDropToStart = askWhatDropToStart;\nfunction askWhatGameToWatch(random) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let activecampainnames = yield getActiveCampaigns();\n        winston_1.default.silly(\" \");\n        if (!index_1.userdata.settings.displayless) {\n            if (!random) {\n                yield inquirer\n                    .prompt([\n                    {\n                        type: 'list',\n                        name: 'namelist',\n                        message: 'What Game do you wanna watch?',\n                        choices: activecampainnames,\n                    },\n                ])\n                    .then((answer) => __awaiter(this, void 0, void 0, function* () {\n                    index_1.userdata.game = answer.namelist;\n                }));\n            }\n            else {\n                index_1.userdata.game = activecampainnames[(0, util_1.getRandomInt)(index_1.userdata.availableDropNameChoices.length)];\n                winston_1.default.info(chalk_1.default.gray('Selected a random game to watch: ' + chalk_1.default.white(index_1.userdata.game)));\n            }\n        }\n        else {\n            if (index_1.userdata.settings.Prioritylist.length === 0) {\n                winston_1.default.warn(chalk_1.default.yellow('Warning: Please add Games to your Priority List, otherwise the bot will select a random game... or disable this feature in the settings...'));\n                index_1.userdata.game = activecampainnames[(0, util_1.getRandomInt)(index_1.userdata.availableDropNameChoices.length)];\n                winston_1.default.info(chalk_1.default.gray('Selected a random Game to watch: ' + chalk_1.default.white(index_1.userdata.game)));\n            }\n            else {\n                index_1.userdata.game = index_1.userdata.settings.Prioritylist[0];\n                winston_1.default.info(chalk_1.default.gray('Selected a Game from your Priority List watch: ' + index_1.userdata.game));\n            }\n        }\n    });\n}\nexports.askWhatGameToWatch = askWhatGameToWatch;\nfunction getActiveCampaigns() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let activecampainnames = [];\n        winston_1.default.silly(\" \");\n        winston_1.default.info(chalk_1.default.gray('Getting all active Campaigns...'), { event: \"get\" });\n        const DropCampaignDetails = yield TwitchGQL._SendQuery(\"ViewerDropsDashboard\", {}, '', 'OAuth ' + index_1.userdata.auth_token, true, {}, true);\n        let allDropCampaings = DropCampaignDetails[0].data.currentUser.dropCampaigns;\n        yield allDropCampaings.forEach((campaign) => {\n            if (campaign.status === 'ACTIVE') {\n                if (activecampainnames.includes(campaign.game.displayName) === false) {\n                    activecampainnames.push(campaign.game.displayName);\n                }\n            }\n        });\n        if (index_1.userdata.settings.Prioritylist.length > 0) {\n            for (let i = index_1.userdata.settings.Prioritylist.length; i--;) {\n                if (!activecampainnames.includes(index_1.userdata.settings.Prioritylist[i])) {\n                    winston_1.default.info(chalk_1.default.yellow(\"Removed \" + index_1.userdata.settings.Prioritylist[i] + \" from the Priority List, because there is no ACTIVE campaign with such name.\"));\n                    index_1.userdata.settings.Prioritylist.splice(i, 1);\n                }\n            }\n        }\n        return activecampainnames;\n    });\n}\nexports.getActiveCampaigns = getActiveCampaigns;\n"],
  "mappings": "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",
  "names": []
}

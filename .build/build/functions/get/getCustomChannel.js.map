{
  "version": 3,
  "sources": ["../../../../build/functions/get/getCustomChannel.js"],
  "sourcesContent": ["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.customCheckLive = exports.askCustomChannelStart = exports.getCustomChannel = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst index_1 = require(\"../../index\");\nconst winston_1 = __importDefault(require(\"winston\"));\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst util_1 = require(\"../../utils/util\");\nconst inputReader = require(\"wait-console-input\");\nconst inquirer = require(\"inquirer\");\nconst TwitchGQL = require(\"@zaarrg/twitch-gql-ttvdropbot\").Init();\nfunction getCustomChannel() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const path = './CustomChannels.json';\n        if (!index_1.userdata.settings.displayless) {\n            if (fs_1.default.existsSync(path)) {\n                let customch = fs_1.default.readFileSync('./CustomChannels.json', 'utf8');\n                index_1.userdata.customchannel = JSON.parse(customch);\n                //Check Drops Amount...\n                if (index_1.userdata.customchannel.length === 0) {\n                    winston_1.default.silly(\" \");\n                    winston_1.default.info(chalk_1.default.gray(\"No Custom Channels Found...\"));\n                    yield createCustomChannel(true);\n                }\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.gray(\"Found \" + index_1.userdata.customchannel.length + \" Custom Channels...\"));\n                winston_1.default.silly(\" \");\n                //Ask if user wanna add another ch\n                yield addanotherone();\n                yield customCheckLive(true);\n                yield askCustomChannelStart(false, true);\n            }\n            else {\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.gray(\"No Custom Channels Found...\"));\n                yield createCustomChannel(false);\n                if (index_1.userdata.customchannel.length === 0) {\n                    winston_1.default.silly(\" \");\n                    winston_1.default.info(chalk_1.default.gray(\"No Custom Channels Created...\"));\n                    winston_1.default.silly(\" \");\n                    winston_1.default.info(chalk_1.default.gray(\"Closing Bot, No Custom Channels Added!\"));\n                    if (!index_1.userdata.settings.displayless)\n                        inputReader.wait(chalk_1.default.gray(\"Press any Key to continue...\"));\n                    process.exit(21);\n                }\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.gray(\"Found \" + index_1.userdata.customchannel.length + \" Custom Channels...\"));\n                winston_1.default.silly(\" \");\n                //Ask if user wanna add another ch\n                yield addanotherone();\n                yield customCheckLive(true);\n                yield askCustomChannelStart(false, true);\n            }\n        }\n        else {\n            const path = './CustomChannels.json';\n            if (fs_1.default.existsSync(path)) {\n                let customch = fs_1.default.readFileSync('./CustomChannels.json', 'utf8');\n                index_1.userdata.customchannel = JSON.parse(customch);\n                //Check Drops Amount...\n                if (index_1.userdata.customchannel.length === 0) {\n                    winston_1.default.silly(\" \");\n                    winston_1.default.info(chalk_1.default.gray(\"No Custom Channels Found...\"));\n                    process.exit(1);\n                }\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.gray(\"Found \" + index_1.userdata.customchannel.length + \" Custom Channels...\"));\n                winston_1.default.silly(\" \");\n                //Let the User Select a Starting Ch\n                yield customCheckLive(true);\n                yield askCustomChannelStart(true, true);\n            }\n            else {\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.gray(\"Closing Bot, somehow there is no Customchannels file anymore...!\"));\n                if (!index_1.userdata.settings.displayless)\n                    inputReader.wait(chalk_1.default.gray(\"Press any Key to continue...\"));\n                process.exit(21);\n            }\n        }\n    });\n}\nexports.getCustomChannel = getCustomChannel;\nfunction addanotherone() {\n    return __awaiter(this, void 0, void 0, function* () {\n        //Ask if user wanna add another ch\n        yield inquirer\n            .prompt([\n            {\n                type: 'confirm',\n                name: 'confirmed',\n                message: 'Do you wanna add a new Custom Channel?',\n            },\n        ])\n            .then((answers) => __awaiter(this, void 0, void 0, function* () {\n            if (answers.confirmed) {\n                yield createCustomChannel(false);\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.gray(\"Found \" + index_1.userdata.customchannel.length + \" Custom Channels...\"));\n                winston_1.default.silly(\" \");\n            }\n        }));\n    });\n}\nfunction askCustomChannelStart(random, filterlive) {\n    return __awaiter(this, void 0, void 0, function* () {\n        index_1.userdata.availableDropNameChoices = [];\n        index_1.userdata.customchannel.forEach(channel => {\n            if (filterlive) {\n                if (channel.live) {\n                    index_1.userdata.availableDropNameChoices.push(channel.Name);\n                }\n            }\n            else {\n                index_1.userdata.availableDropNameChoices.push(channel.Name);\n            }\n        });\n        if (index_1.userdata.availableDropNameChoices.length === 0) {\n            winston_1.default.info(chalk_1.default.yellow('No Channels life select any to start...'));\n            index_1.userdata.customchannel.forEach(channel => { index_1.userdata.availableDropNameChoices.push(channel.Name); });\n        }\n        winston_1.default.silly(\" \");\n        if (!random) {\n            yield inquirer\n                .prompt([\n                {\n                    type: 'list',\n                    name: 'namelist',\n                    message: 'What Drop do you wanna start Watching?',\n                    choices: index_1.userdata.availableDropNameChoices,\n                },\n            ])\n                .then((answer) => __awaiter(this, void 0, void 0, function* () {\n                index_1.userdata.customchannel.forEach(drop => {\n                    if (drop.Name === answer.namelist) {\n                        index_1.userdata.startDrop = drop.TTVLink.split('https://www.twitch.tv/')[1];\n                    }\n                });\n            }));\n        }\n        else {\n            let randomname = index_1.userdata.availableDropNameChoices[(0, util_1.getRandomInt)(index_1.userdata.availableDropNameChoices.length)];\n            index_1.userdata.customchannel.forEach(drop => {\n                if (drop.Name === randomname) {\n                    index_1.userdata.startDrop = drop.TTVLink.split('https://www.twitch.tv/')[1];\n                }\n            });\n            winston_1.default.info(chalk_1.default.gray('Selected a random drop to watch: ' + chalk_1.default.white(index_1.userdata.startDrop)));\n        }\n    });\n}\nexports.askCustomChannelStart = askCustomChannelStart;\nfunction createCustomChannel(ask) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (ask) {\n            yield inquirer\n                .prompt([\n                {\n                    type: 'confirm',\n                    name: 'confirmed',\n                    message: 'Do you wanna add a Custom Channel?',\n                },\n            ])\n                .then((answers) => __awaiter(this, void 0, void 0, function* () {\n                if (!answers.confirmed) {\n                    winston_1.default.silly(\" \");\n                    winston_1.default.info(chalk_1.default.gray(\"Closing Bot, No Custom Channels Added!\"));\n                    if (!index_1.userdata.settings.displayless)\n                        inputReader.wait(chalk_1.default.gray(\"Press any Key to continue...\"));\n                    process.exit(21);\n                }\n                else {\n                    yield getCustomDetails();\n                }\n            }));\n        }\n        else {\n            yield getCustomDetails();\n        }\n    });\n}\nfunction getCustomDetails() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let CustomChannel = {\n            Name: '',\n            TTVLink: '',\n            WatchType: '',\n            Time: 0,\n            Points: false\n        };\n        const watch = [\"Watch indefinitely\", \"Watch until time runs out\"];\n        yield inquirer\n            .prompt([\n            {\n                type: 'input',\n                name: 'name',\n                message: 'Please provide a Name for this Custom Channel:',\n            },\n            {\n                type: 'input',\n                name: 'ttvlink',\n                message: 'Please provide the Twitch Url:',\n                validate: (value) => (0, util_1.validURL)(value),\n            },\n            {\n                type: 'list',\n                name: 'watchoption',\n                message: 'How should the channel be watched?',\n                choices: watch,\n            },\n            {\n                type: 'confirm',\n                name: 'points',\n                message: 'Should the Bot also Farm Points?',\n            },\n        ])\n            .then((answers) => __awaiter(this, void 0, void 0, function* () {\n            winston_1.default.info(chalk_1.default.gray(\"Setting Name, link and the watch type...\"));\n            //Set\n            CustomChannel.Name = answers.name;\n            CustomChannel.TTVLink = answers.ttvlink;\n            CustomChannel.WatchType = answers.watchoption;\n            CustomChannel.Points = answers.points;\n            if (answers.watchoption === 'Watch until time runs out') {\n                yield inquirer.prompt([\n                    {\n                        type: 'input',\n                        name: 'time',\n                        message: 'How many minutes should the channel be watched:',\n                    },\n                ]).then((answers) => __awaiter(this, void 0, void 0, function* () {\n                    winston_1.default.info(chalk_1.default.gray(\"Setting Time...\"));\n                    CustomChannel.Time = answers.time;\n                }));\n            }\n            index_1.userdata.customchannel.push(CustomChannel);\n            //Save Created CH\n            yield fs_1.default.promises.writeFile('./CustomChannels.json', JSON.stringify(index_1.userdata.customchannel, null, 2)).then(function () {\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.green(\"Successfully Saved Custom Channels...\"));\n                winston_1.default.silly(\" \");\n            }).catch(err => { throw err; });\n        }));\n    });\n}\nfunction customCheckLive(feedback) {\n    return __awaiter(this, void 0, void 0, function* () {\n        for (const customchannel of index_1.userdata.customchannel) {\n            let channelLogin = customchannel.TTVLink.split('https://www.twitch.tv/')[1];\n            let status = yield TwitchGQL.GetLiveStatus(channelLogin);\n            customchannel[\"live\"] = !!status;\n            if (feedback) {\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.cyan(customchannel.TTVLink) + \" | \" + chalk_1.default.magenta(customchannel.Name) + \" | \" + (0, util_1.statustoString)(customchannel.live), { event: \"getResult\" });\n            }\n        }\n        if (feedback)\n            winston_1.default.silly(\" \");\n    });\n}\nexports.customCheckLive = customCheckLive;\n"],
  "mappings": "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",
  "names": []
}

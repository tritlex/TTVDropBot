{
  "version": 3,
  "sources": ["../../../build/Checks/claimCheck.js"],
  "sourcesContent": ["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.matchClaimedDrops = exports.claimableCheck = void 0;\nconst winston_1 = __importDefault(require(\"winston\"));\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst restartHandler_1 = require(\"../functions/handler/restartHandler\");\nconst index_1 = require(\"../index\");\nconst util_1 = require(\"../utils/util\");\nconst TwitchGQL = require(\"@zaarrg/twitch-gql-ttvdropbot\").Init();\nfunction claimableCheck(CurrentDrop, autoclaim, onlycheck) {\n    return __awaiter(this, void 0, void 0, function* () {\n        //filter all non active drops\n        let nonworkingamount = 0;\n        let notavaiableyet = 0;\n        let preconditions = false;\n        CurrentDrop.timebasedrop.forEach(timedrop => {\n            if (!timedrop.self.isClaimed && timedrop.self.status === 'Not Active' || !timedrop.self.isClaimed && timedrop.self.status === 'Ended') {\n                nonworkingamount++;\n            }\n            if (!timedrop.self.isClaimed && timedrop.self.status === 'Not Active') {\n                notavaiableyet++;\n            }\n            if (timedrop.preconditionDrops !== null) {\n                preconditions = true;\n            }\n        });\n        let workingdropslenght = (CurrentDrop.timebasedrop.length - nonworkingamount);\n        let hundredpercent = 0;\n        let isclaimedamount = 0;\n        for (const timedrop of CurrentDrop.timebasedrop) {\n            if (timedrop.requiredMinutesWatched === timedrop.self.currentMinutesWatched) {\n                hundredpercent++;\n            }\n            if (timedrop.self.isClaimed) {\n                isclaimedamount++;\n            }\n            if (autoclaim || preconditions) {\n                //Auto Claim if possible\n                for (const benefit of timedrop.benefitEdges) {\n                    if (timedrop.self.currentMinutesWatched === timedrop.requiredMinutesWatched && timedrop.self.dropInstanceID !== null) {\n                        let opts = {\n                            \"input\": {\n                                \"dropInstanceID\": timedrop.self.dropInstanceID.toString()\n                            }\n                        };\n                        try {\n                            yield TwitchGQL._SendQuery(\"DropsPage_ClaimDropRewards\", opts, 'a455deea71bdc9015b78eb49f4acfbce8baa7ccbedd28e549bb025bd0f751930', 'OAuth ' + index_1.userdata.auth_token, true, {}, true);\n                            if (autoclaim)\n                                winston_1.default.info(chalk_1.default.gray('Claimed ' + chalk_1.default.green(timedrop.name)), { event: \"claim\" });\n                            if (preconditions && !autoclaim)\n                                winston_1.default.info(chalk_1.default.gray('Claimed ' + chalk_1.default.green(timedrop.name) + ' because otherwise cant watch next drop...'), { event: \"claim\" });\n                        }\n                        catch (e) {\n                            if (autoclaim)\n                                winston_1.default.info(chalk_1.default.gray('There was an error trying to claim ' + chalk_1.default.green(timedrop.name) + ' Will retry again.'), { event: \"claim\" });\n                        }\n                    }\n                }\n            }\n        }\n        //Check if all Drops of the game are claimed/claimable\n        if (index_1.userdata.settings.debug)\n            winston_1.default.info('Claim CHECK ONE ' + hundredpercent + ' | ' + workingdropslenght + ' | ' + isclaimedamount + ' | ' + nonworkingamount + ' | ' + notavaiableyet);\n        if (!onlycheck)\n            yield allgameddropsclaimableCheck();\n        //All Claimable\n        if (workingdropslenght !== CurrentDrop.timebasedrop.length && notavaiableyet >= (isclaimedamount + hundredpercent)) {\n            if (!onlycheck) {\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.green('Got all available Drops, missing Drops are not active yet... Looking for new ones...'), { event: \"newDrop\" });\n                yield (0, restartHandler_1.restartHandler)(true, true, true, true, false);\n            }\n        }\n        else if (workingdropslenght === 0) {\n            if (!onlycheck) {\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.green('All available Drops for Current Drop are unavailable... Looking for new ones...'), { event: \"newDrop\" });\n                yield (0, restartHandler_1.restartHandler)(true, true, true, true, false);\n            }\n        }\n        else if (hundredpercent >= workingdropslenght) {\n            if (!onlycheck) {\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.green('All available Drops for Current Drop Claimable... Looking for new ones...'), { event: \"newDrop\" });\n                yield (0, restartHandler_1.restartHandler)(true, true, true, true, false);\n            }\n        }\n        else if (isclaimedamount >= workingdropslenght) {\n            CurrentDrop.isClaimed = true;\n            if (!onlycheck) {\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.green('All Drops for Current Drop Claimed... Looking for new ones...'), { event: \"newDrop\" });\n                yield (0, restartHandler_1.restartHandler)(true, true, true, true, false);\n            }\n        }\n        else if ((isclaimedamount + hundredpercent) >= workingdropslenght) {\n            if (!onlycheck) {\n                winston_1.default.silly(\" \");\n                winston_1.default.info(chalk_1.default.green('All available Drops for Current Drop Claimable or Claimed... Looking for new ones...'), { event: \"newDrop\" });\n                yield (0, restartHandler_1.restartHandler)(true, true, true, true, false);\n            }\n        }\n        else {\n            nonworkingamount = 0;\n            hundredpercent = 0;\n            isclaimedamount = 0;\n        }\n    });\n}\nexports.claimableCheck = claimableCheck;\nfunction allgameddropsclaimableCheck() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let nonworkingamount = 0;\n        let amount = 0;\n        let isclaimedorclaimableamount = 0;\n        let offlinedrops = 0;\n        for (const drop of index_1.userdata.drops) {\n            //filter all non active drops\n            drop.timebasedrop.forEach(timedrop => {\n                amount++;\n                if (!timedrop.self.isClaimed && timedrop.self.status === 'Not Active' || !timedrop.self.isClaimed && timedrop.self.status === 'Ended') {\n                    nonworkingamount++;\n                }\n                else if (timedrop.requiredMinutesWatched === timedrop.self.currentMinutesWatched || timedrop.self.isClaimed === true) {\n                    isclaimedorclaimableamount++;\n                }\n                else if (timedrop.self.status === 'Active' && !drop.live) {\n                    offlinedrops++;\n                }\n            });\n        }\n        if (index_1.userdata.settings.debug)\n            winston_1.default.info('Claim CHECK LOOP ' + isclaimedorclaimableamount + ' | ' + amount + ' | ' + nonworkingamount + ' | ' + offlinedrops);\n        if (isclaimedorclaimableamount >= (amount - nonworkingamount)) {\n            winston_1.default.silly(\" \");\n            if (index_1.userdata.settings.Prioritylist.length === 0)\n                winston_1.default.warn(chalk_1.default.yellow('Warning: Please add Games to your Priority List, otherwise the bot will select a random game... or disable this feature in the settings... or disable this feature in the settings...'));\n            winston_1.default.info(chalk_1.default.green('All available drops of the game claimed or claimable... Looking for a new Game....'), { event: \"newGame\" });\n            yield (0, restartHandler_1.restartHandler)(true, true, true, true, true);\n        }\n        else if (isclaimedorclaimableamount >= ((amount - nonworkingamount) - offlinedrops)) {\n            winston_1.default.silly(\" \");\n            if (index_1.userdata.settings.WaitforChannels) {\n                winston_1.default.info(chalk_1.default.green('All available Live Drops of the game claimed or claimable... Looking for new Live Drop in 5 Minutes....'), { event: \"newDrop\" });\n                winston_1.default.silly(' ', { event: \"progressEnd\" });\n                yield (0, util_1.delay)(300000);\n                yield (0, restartHandler_1.restartHandler)(true, true, true, true, false);\n            }\n            else {\n                if (index_1.userdata.settings.Prioritylist.length === 0)\n                    winston_1.default.warn(chalk_1.default.yellow('Warning: Please add Games to your Priority List, otherwise the bot will select a random game... or disable this feature in the settings...'));\n                winston_1.default.info(chalk_1.default.green('All available Live Drops of the game claimed or claimable... Looking for a new Game....'), { event: \"newGame\" });\n                yield (0, restartHandler_1.restartHandler)(true, true, true, true, true);\n            }\n        }\n    });\n}\nfunction matchClaimedDrops() {\n    return __awaiter(this, void 0, void 0, function* () {\n        //Check if Drop isclaimed\n        index_1.userdata.claimedDrops.forEach(claimeddrop => {\n            index_1.userdata.drops.forEach(drop => {\n                drop.timebasedrop.forEach(timebasedrop => {\n                    timebasedrop.benefitEdges.forEach(benefit => {\n                        if (claimeddrop.imageurl.toString() === benefit.benefit.imageAssetURL.toString()) {\n                            for (const [i, drops] of drop.timebasedrop.entries()) {\n                                if (drops.self.isClaimed === null) {\n                                    drop.isClaimed = true;\n                                }\n                            }\n                        }\n                    });\n                });\n            });\n        });\n        index_1.userdata.drops.forEach(drop => {\n            drop.timebasedrop.forEach(timebasedrop => {\n                if (drop.isClaimed && timebasedrop.self.isClaimed === null) {\n                    timebasedrop['self'] = {\n                        __typename: \"TimeBasedDropSelfEdge\",\n                        currentMinutesWatched: 0,\n                        dropInstanceID: null,\n                        isClaimed: true\n                    };\n                }\n            });\n        });\n    });\n}\nexports.matchClaimedDrops = matchClaimedDrops;\n"],
  "mappings": "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",
  "names": []
}
